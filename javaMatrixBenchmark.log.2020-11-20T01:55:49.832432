# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 0, toolName = commonMath3)

# Run progress: 0.00% complete, ETA 01:38:00
# Fork: 1 of 1
# Warmup Iteration   1: 49.859 ±(99.9%) 2.751 us/op
# Warmup Iteration   2: 47.454 ±(99.9%) 0.590 us/op
# Warmup Iteration   3: 51.414 ±(99.9%) 0.813 us/op
Iteration   1: 50.237 ±(99.9%) 0.388 us/op
                 addBenchmark·p0.00:   32.832 us/op
                 addBenchmark·p0.50:   48.704 us/op
                 addBenchmark·p0.90:   56.256 us/op
                 addBenchmark·p0.95:   60.352 us/op
                 addBenchmark·p0.99:   68.736 us/op
                 addBenchmark·p0.999:  113.280 us/op
                 addBenchmark·p0.9999: 1483.728 us/op
                 addBenchmark·p1.00:   31358.976 us/op

Iteration   2: 50.175 ±(99.9%) 0.318 us/op
                 addBenchmark·p0.00:   27.904 us/op
                 addBenchmark·p0.50:   48.704 us/op
                 addBenchmark·p0.90:   57.088 us/op
                 addBenchmark·p0.95:   61.952 us/op
                 addBenchmark·p0.99:   69.760 us/op
                 addBenchmark·p0.999:  105.399 us/op
                 addBenchmark·p0.9999: 1220.466 us/op
                 addBenchmark·p1.00:   19038.208 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 794627
  mean =     50.206 ±(99.9%) 0.251 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 794589 
    [ 2500.000,  5000.000) = 16 
    [ 5000.000,  7500.000) = 7 
    [ 7500.000, 10000.000) = 3 
    [10000.000, 12500.000) = 8 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 2 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     27.904 us/op
     p(50.0000) =     48.704 us/op
     p(90.0000) =     56.640 us/op
     p(95.0000) =     61.184 us/op
     p(99.0000) =     69.376 us/op
     p(99.9000) =    110.848 us/op
     p(99.9900) =   1384.347 us/op
     p(99.9990) =  11598.451 us/op
     p(99.9999) =  31358.976 us/op
    p(100.0000) =  31358.976 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 0, toolName = colt)

# Run progress: 1.19% complete, ETA 02:30:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.063 ±(99.9%) 0.015 us/op
# Warmup Iteration   3: 0.060 ±(99.9%) 0.001 us/op
Iteration   1: 0.059 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.055 us/op
                 addBenchmark·p0.50:   0.058 us/op
                 addBenchmark·p0.90:   0.059 us/op
                 addBenchmark·p0.95:   0.059 us/op
                 addBenchmark·p0.99:   0.061 us/op
                 addBenchmark·p0.999:  0.063 us/op
                 addBenchmark·p0.9999: 2.115 us/op
                 addBenchmark·p1.00:   39.872 us/op

Iteration   2: 0.059 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.055 us/op
                 addBenchmark·p0.50:   0.058 us/op
                 addBenchmark·p0.90:   0.059 us/op
                 addBenchmark·p0.95:   0.059 us/op
                 addBenchmark·p0.99:   0.061 us/op
                 addBenchmark·p0.999:  0.066 us/op
                 addBenchmark·p0.9999: 2.165 us/op
                 addBenchmark·p1.00:   18.336 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1054405
  mean =      0.059 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 1054315 
    [ 2.500,  5.000) = 14 
    [ 5.000,  7.500) = 3 
    [ 7.500, 10.000) = 21 
    [10.000, 12.500) = 36 
    [12.500, 15.000) = 3 
    [15.000, 17.500) = 8 
    [17.500, 20.000) = 3 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 1 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.055 us/op
     p(50.0000) =      0.058 us/op
     p(90.0000) =      0.059 us/op
     p(95.0000) =      0.059 us/op
     p(99.0000) =      0.061 us/op
     p(99.9000) =      0.064 us/op
     p(99.9900) =      2.142 us/op
     p(99.9990) =     15.527 us/op
     p(99.9999) =     38.977 us/op
    p(100.0000) =     39.872 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 0, toolName = ejml)

# Run progress: 2.38% complete, ETA 02:27:24
# Fork: 1 of 1
# Warmup Iteration   1: 21.268 ±(99.9%) 2.482 us/op
# Warmup Iteration   2: 18.285 ±(99.9%) 0.396 us/op
# Warmup Iteration   3: 16.958 ±(99.9%) 0.276 us/op
Iteration   1: 17.529 ±(99.9%) 0.187 us/op
                 addBenchmark·p0.00:   11.824 us/op
                 addBenchmark·p0.50:   15.712 us/op
                 addBenchmark·p0.90:   20.704 us/op
                 addBenchmark·p0.95:   27.456 us/op
                 addBenchmark·p0.99:   33.536 us/op
                 addBenchmark·p0.999:  86.656 us/op
                 addBenchmark·p0.9999: 861.555 us/op
                 addBenchmark·p1.00:   7929.856 us/op

Iteration   2: 19.557 ±(99.9%) 0.189 us/op
                 addBenchmark·p0.00:   12.016 us/op
                 addBenchmark·p0.50:   19.424 us/op
                 addBenchmark·p0.90:   23.264 us/op
                 addBenchmark·p0.95:   25.024 us/op
                 addBenchmark·p0.99:   32.672 us/op
                 addBenchmark·p0.999:  47.744 us/op
                 addBenchmark·p0.9999: 87.174 us/op
                 addBenchmark·p1.00:   13778.944 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1083556
  mean =     18.483 ±(99.9%) 0.133 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 1083464 
    [ 1250.000,  2500.000) = 46 
    [ 2500.000,  3750.000) = 12 
    [ 3750.000,  5000.000) = 1 
    [ 5000.000,  6250.000) = 24 
    [ 6250.000,  7500.000) = 4 
    [ 7500.000,  8750.000) = 2 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 1 
    [12500.000, 13750.000) = 1 
    [13750.000, 15000.000) = 1 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.824 us/op
     p(50.0000) =     16.288 us/op
     p(90.0000) =     22.656 us/op
     p(95.0000) =     25.440 us/op
     p(99.0000) =     32.896 us/op
     p(99.9000) =     82.688 us/op
     p(99.9900) =    211.808 us/op
     p(99.9990) =   6162.968 us/op
     p(99.9999) =  13754.302 us/op
    p(100.0000) =  13778.944 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 0, toolName = la4j)

# Run progress: 3.57% complete, ETA 02:25:37
# Fork: 1 of 1
# Warmup Iteration   1: 42.664 ±(99.9%) 3.363 us/op
# Warmup Iteration   2: 45.423 ±(99.9%) 1.290 us/op
# Warmup Iteration   3: 45.203 ±(99.9%) 0.989 us/op
Iteration   1: 46.221 ±(99.9%) 0.828 us/op
                 addBenchmark·p0.00:   22.112 us/op
                 addBenchmark·p0.50:   43.648 us/op
                 addBenchmark·p0.90:   54.720 us/op
                 addBenchmark·p0.95:   61.504 us/op
                 addBenchmark·p0.99:   101.504 us/op
                 addBenchmark·p0.999:  112.022 us/op
                 addBenchmark·p0.9999: 2395.088 us/op
                 addBenchmark·p1.00:   35061.760 us/op

Iteration   2: 41.567 ±(99.9%) 0.333 us/op
                 addBenchmark·p0.00:   21.664 us/op
                 addBenchmark·p0.50:   41.536 us/op
                 addBenchmark·p0.90:   49.536 us/op
                 addBenchmark·p0.95:   51.712 us/op
                 addBenchmark·p0.99:   58.432 us/op
                 addBenchmark·p0.999:  96.256 us/op
                 addBenchmark·p0.9999: 2509.699 us/op
                 addBenchmark·p1.00:   9158.656 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 458892
  mean =     43.776 ±(99.9%) 0.430 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 458848 
    [ 2500.000,  5000.000) = 23 
    [ 5000.000,  7500.000) = 16 
    [ 7500.000, 10000.000) = 2 
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     21.664 us/op
     p(50.0000) =     42.496 us/op
     p(90.0000) =     51.072 us/op
     p(95.0000) =     56.064 us/op
     p(99.0000) =     96.768 us/op
     p(99.9000) =    109.184 us/op
     p(99.9900) =   2433.009 us/op
     p(99.9990) =   8193.753 us/op
     p(99.9999) =  35061.760 us/op
    p(100.0000) =  35061.760 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 0, toolName = nd4j)

# Run progress: 4.76% complete, ETA 02:23:49
# Fork: 1 of 1
# Warmup Iteration   1: 27.728 ±(99.9%) 0.119 us/op
# Warmup Iteration   2: 28.011 ±(99.9%) 0.257 us/op
# Warmup Iteration   3: 62.750 ±(99.9%) 34.408 us/op
Iteration   1: 51.572 ±(99.9%) 0.195 us/op
                 addBenchmark·p0.00:   13.408 us/op
                 addBenchmark·p0.50:   52.224 us/op
                 addBenchmark·p0.90:   57.984 us/op
                 addBenchmark·p0.95:   60.288 us/op
                 addBenchmark·p0.99:   68.352 us/op
                 addBenchmark·p0.999:  83.968 us/op
                 addBenchmark·p0.9999: 1808.101 us/op
                 addBenchmark·p1.00:   5963.776 us/op

Iteration   2: 54.609 ±(99.9%) 25.512 us/op
                 addBenchmark·p0.00:   14.304 us/op
                 addBenchmark·p0.50:   48.640 us/op
                 addBenchmark·p0.90:   57.600 us/op
                 addBenchmark·p0.95:   62.720 us/op
                 addBenchmark·p0.99:   94.592 us/op
                 addBenchmark·p0.999:  910.123 us/op
                 addBenchmark·p0.9999: 3087.136 us/op
                 addBenchmark·p1.00:   1558183.936 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 587762
  mean =     52.611 ±(99.9%) 8.726 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 587761 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 1 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     13.408 us/op
     p(50.0000) =     51.520 us/op
     p(90.0000) =     57.856 us/op
     p(95.0000) =     60.736 us/op
     p(99.0000) =     72.960 us/op
     p(99.9000) =    340.844 us/op
     p(99.9900) =   2796.221 us/op
     p(99.9990) =   5070.472 us/op
     p(99.9999) = 1558183.936 us/op
    p(100.0000) = 1558183.936 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 0, toolName = jBlas)

# Run progress: 5.95% complete, ETA 02:22:44
# Fork: 1 of 1
# Warmup Iteration   1: 23.481 ±(99.9%) 1.652 us/op
# Warmup Iteration   2: 17.391 ±(99.9%) 0.315 us/op
# Warmup Iteration   3: 16.923 ±(99.9%) 0.402 us/op
Iteration   1: 17.106 ±(99.9%) 0.398 us/op
                 addBenchmark·p0.00:   11.872 us/op
                 addBenchmark·p0.50:   15.344 us/op
                 addBenchmark·p0.90:   18.592 us/op
                 addBenchmark·p0.95:   20.608 us/op
                 addBenchmark·p0.99:   30.400 us/op
                 addBenchmark·p0.999:  51.978 us/op
                 addBenchmark·p0.9999: 2732.691 us/op
                 addBenchmark·p1.00:   12484.608 us/op

Iteration   2: 17.135 ±(99.9%) 0.268 us/op
                 addBenchmark·p0.00:   11.856 us/op
                 addBenchmark·p0.50:   15.344 us/op
                 addBenchmark·p0.90:   19.200 us/op
                 addBenchmark·p0.95:   25.568 us/op
                 addBenchmark·p0.99:   34.240 us/op
                 addBenchmark·p0.999:  81.664 us/op
                 addBenchmark·p0.9999: 405.843 us/op
                 addBenchmark·p1.00:   23003.136 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 889162
  mean =     17.125 ±(99.9%) 0.223 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 889097 
    [ 2500.000,  5000.000) = 20 
    [ 5000.000,  7500.000) = 34 
    [ 7500.000, 10000.000) = 6 
    [10000.000, 12500.000) = 2 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 1 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     11.856 us/op
     p(50.0000) =     15.344 us/op
     p(90.0000) =     18.944 us/op
     p(95.0000) =     22.464 us/op
     p(99.0000) =     33.152 us/op
     p(99.9000) =     70.635 us/op
     p(99.9900) =   1743.209 us/op
     p(99.9990) =   7956.208 us/op
     p(99.9999) =  23003.136 us/op
    p(100.0000) =  23003.136 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 1, toolName = commonMath3)

# Run progress: 7.14% complete, ETA 02:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 4003.531 ±(99.9%) 170.778 us/op
# Warmup Iteration   2: 3550.333 ±(99.9%) 87.512 us/op
# Warmup Iteration   3: 3020.663 ±(99.9%) 42.723 us/op
Iteration   1: 3027.831 ±(99.9%) 27.747 us/op
                 addBenchmark·p0.00:   2129.920 us/op
                 addBenchmark·p0.50:   2883.584 us/op
                 addBenchmark·p0.90:   3215.360 us/op
                 addBenchmark·p0.95:   4120.576 us/op
                 addBenchmark·p0.99:   5316.608 us/op
                 addBenchmark·p0.999:  10430.808 us/op
                 addBenchmark·p0.9999: 23822.336 us/op
                 addBenchmark·p1.00:   23822.336 us/op

Iteration   2: 3006.475 ±(99.9%) 28.917 us/op
                 addBenchmark·p0.00:   2082.816 us/op
                 addBenchmark·p0.50:   2867.200 us/op
                 addBenchmark·p0.90:   3018.752 us/op
                 addBenchmark·p0.95:   4112.384 us/op
                 addBenchmark·p0.99:   5561.139 us/op
                 addBenchmark·p0.999:  11474.682 us/op
                 addBenchmark·p0.9999: 26542.080 us/op
                 addBenchmark·p1.00:   26542.080 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 13233
  mean =   3017.115 ±(99.9%) 20.038 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 129 
    [ 2500.000,  5000.000) = 12941 
    [ 5000.000,  7500.000) = 90 
    [ 7500.000, 10000.000) = 57 
    [10000.000, 12500.000) = 6 
    [12500.000, 15000.000) = 4 
    [15000.000, 17500.000) = 4 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   2082.816 us/op
     p(50.0000) =   2875.392 us/op
     p(90.0000) =   3059.712 us/op
     p(95.0000) =   4116.480 us/op
     p(99.0000) =   5346.591 us/op
     p(99.9000) =  10672.636 us/op
     p(99.9900) =  25662.515 us/op
     p(99.9990) =  26542.080 us/op
     p(99.9999) =  26542.080 us/op
    p(100.0000) =  26542.080 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 1, toolName = colt)

# Run progress: 8.33% complete, ETA 02:18:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ±(99.9%) 0.003 us/op
# Warmup Iteration   2: 0.073 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.073 ±(99.9%) 0.001 us/op
Iteration   1: 0.072 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.067 us/op
                 addBenchmark·p0.50:   0.071 us/op
                 addBenchmark·p0.90:   0.074 us/op
                 addBenchmark·p0.95:   0.074 us/op
                 addBenchmark·p0.99:   0.076 us/op
                 addBenchmark·p0.999:  0.104 us/op
                 addBenchmark·p0.9999: 2.011 us/op
                 addBenchmark·p1.00:   21.888 us/op

Iteration   2: 0.072 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.067 us/op
                 addBenchmark·p0.50:   0.072 us/op
                 addBenchmark·p0.90:   0.074 us/op
                 addBenchmark·p0.95:   0.074 us/op
                 addBenchmark·p0.99:   0.076 us/op
                 addBenchmark·p0.999:  0.079 us/op
                 addBenchmark·p0.9999: 1.870 us/op
                 addBenchmark·p1.00:   18.624 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1568297
  mean =      0.072 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 1568201 
    [ 2.500,  5.000) = 17 
    [ 5.000,  7.500) = 3 
    [ 7.500, 10.000) = 31 
    [10.000, 12.500) = 38 
    [12.500, 15.000) = 2 
    [15.000, 17.500) = 3 
    [17.500, 20.000) = 1 
    [20.000, 22.500) = 1 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.067 us/op
     p(50.0000) =      0.072 us/op
     p(90.0000) =      0.074 us/op
     p(95.0000) =      0.074 us/op
     p(99.0000) =      0.076 us/op
     p(99.9000) =      0.081 us/op
     p(99.9900) =      1.932 us/op
     p(99.9990) =     11.177 us/op
     p(99.9999) =     20.033 us/op
    p(100.0000) =     21.888 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 1, toolName = ejml)

# Run progress: 9.52% complete, ETA 02:16:57
# Fork: 1 of 1
# Warmup Iteration   1: 3547.306 ±(99.9%) 158.344 us/op
# Warmup Iteration   2: 3441.645 ±(99.9%) 79.890 us/op
# Warmup Iteration   3: 3004.216 ±(99.9%) 64.109 us/op
Iteration   1: 2869.955 ±(99.9%) 40.118 us/op
                 addBenchmark·p0.00:   1849.344 us/op
                 addBenchmark·p0.50:   2494.464 us/op
                 addBenchmark·p0.90:   3223.552 us/op
                 addBenchmark·p0.95:   5008.998 us/op
                 addBenchmark·p0.99:   7847.936 us/op
                 addBenchmark·p0.999:  8361.460 us/op
                 addBenchmark·p0.9999: 12320.768 us/op
                 addBenchmark·p1.00:   12320.768 us/op

Iteration   2: 2925.025 ±(99.9%) 45.059 us/op
                 addBenchmark·p0.00:   1849.344 us/op
                 addBenchmark·p0.50:   2498.560 us/op
                 addBenchmark·p0.90:   4333.568 us/op
                 addBenchmark·p0.95:   5226.496 us/op
                 addBenchmark·p0.99:   8019.968 us/op
                 addBenchmark·p0.999:  9409.561 us/op
                 addBenchmark·p0.9999: 25362.432 us/op
                 addBenchmark·p1.00:   25362.432 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 13771
  mean =   2897.232 ±(99.9%) 30.136 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 7130 
    [ 2500.000,  5000.000) = 5885 
    [ 5000.000,  7500.000) = 508 
    [ 7500.000, 10000.000) = 241 
    [10000.000, 12500.000) = 5 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1849.344 us/op
     p(50.0000) =   2498.560 us/op
     p(90.0000) =   4072.243 us/op
     p(95.0000) =   5111.808 us/op
     p(99.0000) =   7932.150 us/op
     p(99.9000) =   8881.832 us/op
     p(99.9900) =  20665.598 us/op
     p(99.9990) =  25362.432 us/op
     p(99.9999) =  25362.432 us/op
    p(100.0000) =  25362.432 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 1, toolName = la4j)

# Run progress: 10.71% complete, ETA 02:15:12
# Fork: 1 of 1
# Warmup Iteration   1: 3861.436 ±(99.9%) 161.144 us/op
# Warmup Iteration   2: 3289.974 ±(99.9%) 60.066 us/op
# Warmup Iteration   3: 3242.358 ±(99.9%) 71.560 us/op
Iteration   1: 3097.337 ±(99.9%) 34.940 us/op
                 addBenchmark·p0.00:   2134.016 us/op
                 addBenchmark·p0.50:   2932.736 us/op
                 addBenchmark·p0.90:   3331.277 us/op
                 addBenchmark·p0.95:   4186.112 us/op
                 addBenchmark·p0.99:   5890.540 us/op
                 addBenchmark·p0.999:  15521.694 us/op
                 addBenchmark·p0.9999: 26836.992 us/op
                 addBenchmark·p1.00:   26836.992 us/op

Iteration   2: 3191.485 ±(99.9%) 36.800 us/op
                 addBenchmark·p0.00:   2142.208 us/op
                 addBenchmark·p0.50:   2936.832 us/op
                 addBenchmark·p0.90:   4096.000 us/op
                 addBenchmark·p0.95:   4243.456 us/op
                 addBenchmark·p0.99:   6257.541 us/op
                 addBenchmark·p0.999:  15457.616 us/op
                 addBenchmark·p0.9999: 19890.176 us/op
                 addBenchmark·p1.00:   19890.176 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 12702
  mean =   3143.707 ±(99.9%) 25.386 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 113 
    [ 2500.000,  5000.000) = 12380 
    [ 5000.000,  7500.000) = 136 
    [ 7500.000, 10000.000) = 37 
    [10000.000, 12500.000) = 16 
    [12500.000, 15000.000) = 7 
    [15000.000, 17500.000) = 8 
    [17500.000, 20000.000) = 2 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   2134.016 us/op
     p(50.0000) =   2932.736 us/op
     p(90.0000) =   3993.600 us/op
     p(95.0000) =   4218.880 us/op
     p(99.0000) =   6094.111 us/op
     p(99.9000) =  15413.772 us/op
     p(99.9900) =  26323.275 us/op
     p(99.9990) =  26836.992 us/op
     p(99.9999) =  26836.992 us/op
    p(100.0000) =  26836.992 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 1, toolName = nd4j)

# Run progress: 11.90% complete, ETA 02:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 641.595 ±(99.9%) 162.999 us/op
# Warmup Iteration   2: 773.541 ±(99.9%) 522.207 us/op
# Warmup Iteration   3: 726.460 ±(99.9%) 443.617 us/op
Iteration   1: 725.884 ±(99.9%) 276.634 us/op
                 addBenchmark·p0.00:   156.672 us/op
                 addBenchmark·p0.50:   523.264 us/op
                 addBenchmark·p0.90:   562.176 us/op
                 addBenchmark·p0.95:   581.632 us/op
                 addBenchmark·p0.99:   2555.904 us/op
                 addBenchmark·p0.999:  3382.178 us/op
                 addBenchmark·p0.9999: 1073613.898 us/op
                 addBenchmark·p1.00:   1512046.592 us/op

Iteration   2: 580.952 ±(99.9%) 201.903 us/op
                 addBenchmark·p0.00:   140.288 us/op
                 addBenchmark·p0.50:   503.296 us/op
                 addBenchmark·p0.90:   537.600 us/op
                 addBenchmark·p0.95:   547.840 us/op
                 addBenchmark·p0.99:   574.464 us/op
                 addBenchmark·p0.999:  2067.350 us/op
                 addBenchmark·p0.9999: 714750.925 us/op
                 addBenchmark·p1.00:   1325400.064 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 63083
  mean =    646.881 ±(99.9%) 167.171 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 63075 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 1 
    [ 750000.000,  875000.000) = 2 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 1 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 3 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 1 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    140.288 us/op
     p(50.0000) =    509.952 us/op
     p(90.0000) =    548.864 us/op
     p(95.0000) =    564.224 us/op
     p(99.0000) =   2404.352 us/op
     p(99.9000) =   2908.160 us/op
     p(99.9900) = 833961.853 us/op
     p(99.9990) = 1512046.592 us/op
     p(99.9999) = 1512046.592 us/op
    p(100.0000) = 1512046.592 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 1, toolName = jBlas)

# Run progress: 13.10% complete, ETA 02:11:41
# Fork: 1 of 1
# Warmup Iteration   1: 2968.182 ±(99.9%) 98.087 us/op
# Warmup Iteration   2: 2910.535 ±(99.9%) 56.909 us/op
# Warmup Iteration   3: 3021.846 ±(99.9%) 64.598 us/op
Iteration   1: 2930.562 ±(99.9%) 45.867 us/op
                 addBenchmark·p0.00:   1873.920 us/op
                 addBenchmark·p0.50:   2494.464 us/op
                 addBenchmark·p0.90:   4668.621 us/op
                 addBenchmark·p0.95:   5398.528 us/op
                 addBenchmark·p0.99:   7733.248 us/op
                 addBenchmark·p0.999:  8702.099 us/op
                 addBenchmark·p0.9999: 15941.632 us/op
                 addBenchmark·p1.00:   15941.632 us/op

Iteration   2: 2953.445 ±(99.9%) 47.659 us/op
                 addBenchmark·p0.00:   1886.208 us/op
                 addBenchmark·p0.50:   2494.464 us/op
                 addBenchmark·p0.90:   4726.784 us/op
                 addBenchmark·p0.95:   5586.944 us/op
                 addBenchmark·p0.99:   7818.445 us/op
                 addBenchmark·p0.999:  11102.454 us/op
                 addBenchmark·p0.9999: 13680.640 us/op
                 addBenchmark·p1.00:   13680.640 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 13569
  mean =   2941.961 ±(99.9%) 33.061 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 0 
    [ 1250.000,  2500.000) = 7253 
    [ 2500.000,  3750.000) = 4793 
    [ 3750.000,  5000.000) = 581 
    [ 5000.000,  6250.000) = 446 
    [ 6250.000,  7500.000) = 148 
    [ 7500.000,  8750.000) = 330 
    [ 8750.000, 10000.000) = 7 
    [10000.000, 11250.000) = 4 
    [11250.000, 12500.000) = 3 
    [12500.000, 13750.000) = 3 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1873.920 us/op
     p(50.0000) =   2494.464 us/op
     p(90.0000) =   4694.016 us/op
     p(95.0000) =   5472.256 us/op
     p(99.0000) =   7782.400 us/op
     p(99.9000) =   9318.072 us/op
     p(99.9900) =  15134.458 us/op
     p(99.9990) =  15941.632 us/op
     p(99.9999) =  15941.632 us/op
    p(100.0000) =  15941.632 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 2, toolName = commonMath3)

# Run progress: 14.29% complete, ETA 02:09:51
# Fork: 1 of 1
# Warmup Iteration   1: 1271.952 ±(99.9%) 39.252 us/op
# Warmup Iteration   2: 1192.593 ±(99.9%) 23.218 us/op
# Warmup Iteration   3: 1094.902 ±(99.9%) 11.541 us/op
Iteration   1: 1099.047 ±(99.9%) 6.054 us/op
                 addBenchmark·p0.00:   624.640 us/op
                 addBenchmark·p0.50:   1087.488 us/op
                 addBenchmark·p0.90:   1132.544 us/op
                 addBenchmark·p0.95:   1218.560 us/op
                 addBenchmark·p0.99:   1435.648 us/op
                 addBenchmark·p0.999:  5941.690 us/op
                 addBenchmark·p0.9999: 12565.525 us/op
                 addBenchmark·p1.00:   13074.432 us/op

Iteration   2: 1209.360 ±(99.9%) 8.795 us/op
                 addBenchmark·p0.00:   628.736 us/op
                 addBenchmark·p0.50:   1204.224 us/op
                 addBenchmark·p0.90:   1284.096 us/op
                 addBenchmark·p0.95:   1327.104 us/op
                 addBenchmark·p0.99:   1734.246 us/op
                 addBenchmark·p0.999:  6195.118 us/op
                 addBenchmark·p0.9999: 17425.498 us/op
                 addBenchmark·p1.00:   17596.416 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 34692
  mean =   1151.574 ±(99.9%) 5.342 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 30795 
    [ 1250.000,  2500.000) = 3770 
    [ 2500.000,  3750.000) = 65 
    [ 3750.000,  5000.000) = 17 
    [ 5000.000,  6250.000) = 17 
    [ 6250.000,  7500.000) = 15 
    [ 7500.000,  8750.000) = 5 
    [ 8750.000, 10000.000) = 1 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 1 
    [12500.000, 13750.000) = 3 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 1 
    [17500.000, 18750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    624.640 us/op
     p(50.0000) =   1107.968 us/op
     p(90.0000) =   1257.472 us/op
     p(95.0000) =   1314.816 us/op
     p(99.0000) =   1466.368 us/op
     p(99.9000) =   5976.351 us/op
     p(99.9900) =  12866.829 us/op
     p(99.9990) =  17596.416 us/op
     p(99.9999) =  17596.416 us/op
    p(100.0000) =  17596.416 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 2, toolName = colt)

# Run progress: 15.48% complete, ETA 02:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.087 ±(99.9%) 0.067 us/op
# Warmup Iteration   3: 0.063 ±(99.9%) 0.012 us/op
Iteration   1: 0.059 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.054 us/op
                 addBenchmark·p0.50:   0.058 us/op
                 addBenchmark·p0.90:   0.060 us/op
                 addBenchmark·p0.95:   0.061 us/op
                 addBenchmark·p0.99:   0.062 us/op
                 addBenchmark·p0.999:  0.064 us/op
                 addBenchmark·p0.9999: 2.888 us/op
                 addBenchmark·p1.00:   27.808 us/op

Iteration   2: 0.059 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.054 us/op
                 addBenchmark·p0.50:   0.058 us/op
                 addBenchmark·p0.90:   0.060 us/op
                 addBenchmark·p0.95:   0.061 us/op
                 addBenchmark·p0.99:   0.062 us/op
                 addBenchmark·p0.999:  0.064 us/op
                 addBenchmark·p0.9999: 2.304 us/op
                 addBenchmark·p1.00:   50.496 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1058244
  mean =      0.059 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 1058151 
    [ 5.000, 10.000) = 41 
    [10.000, 15.000) = 45 
    [15.000, 20.000) = 4 
    [20.000, 25.000) = 1 
    [25.000, 30.000) = 1 
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 
    [45.000, 50.000) = 0 
    [50.000, 55.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      0.054 us/op
     p(50.0000) =      0.058 us/op
     p(90.0000) =      0.060 us/op
     p(95.0000) =      0.061 us/op
     p(99.0000) =      0.062 us/op
     p(99.9000) =      0.064 us/op
     p(99.9900) =      2.481 us/op
     p(99.9990) =     12.379 us/op
     p(99.9999) =     49.175 us/op
    p(100.0000) =     50.496 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 2, toolName = ejml)

# Run progress: 16.67% complete, ETA 02:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 714.584 ±(99.9%) 19.902 us/op
# Warmup Iteration   2: 761.301 ±(99.9%) 8.274 us/op
# Warmup Iteration   3: 757.218 ±(99.9%) 5.209 us/op
Iteration   1: 773.445 ±(99.9%) 5.922 us/op
                 addBenchmark·p0.00:   425.984 us/op
                 addBenchmark·p0.50:   755.712 us/op
                 addBenchmark·p0.90:   791.552 us/op
                 addBenchmark·p0.95:   920.986 us/op
                 addBenchmark·p0.99:   1107.313 us/op
                 addBenchmark·p0.999:  5196.546 us/op
                 addBenchmark·p0.9999: 15376.817 us/op
                 addBenchmark·p1.00:   17432.576 us/op

Iteration   2: 756.830 ±(99.9%) 4.143 us/op
                 addBenchmark·p0.00:   360.448 us/op
                 addBenchmark·p0.50:   757.760 us/op
                 addBenchmark·p0.90:   784.384 us/op
                 addBenchmark·p0.95:   797.696 us/op
                 addBenchmark·p0.99:   881.644 us/op
                 addBenchmark·p0.999:  4549.526 us/op
                 addBenchmark·p0.9999: 6820.438 us/op
                 addBenchmark·p1.00:   12353.536 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 52232
  mean =    765.047 ±(99.9%) 3.602 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 52011 
    [ 1250.000,  2500.000) = 86 
    [ 2500.000,  3750.000) = 65 
    [ 3750.000,  5000.000) = 20 
    [ 5000.000,  6250.000) = 35 
    [ 6250.000,  7500.000) = 6 
    [ 7500.000,  8750.000) = 2 
    [ 8750.000, 10000.000) = 1 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 2 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 1 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 2 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    360.448 us/op
     p(50.0000) =    756.736 us/op
     p(90.0000) =    786.432 us/op
     p(95.0000) =    812.032 us/op
     p(99.0000) =   1087.488 us/op
     p(99.9000) =   4939.538 us/op
     p(99.9900) =  11892.559 us/op
     p(99.9990) =  17432.576 us/op
     p(99.9999) =  17432.576 us/op
    p(100.0000) =  17432.576 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 2, toolName = la4j)

# Run progress: 17.86% complete, ETA 02:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 1403.455 ±(99.9%) 93.671 us/op
# Warmup Iteration   2: 1161.586 ±(99.9%) 9.377 us/op
# Warmup Iteration   3: 1230.506 ±(99.9%) 14.356 us/op
Iteration   1: 1037.308 ±(99.9%) 8.282 us/op
                 addBenchmark·p0.00:   634.880 us/op
                 addBenchmark·p0.50:   973.824 us/op
                 addBenchmark·p0.90:   1144.832 us/op
                 addBenchmark·p0.95:   1183.744 us/op
                 addBenchmark·p0.99:   1430.344 us/op
                 addBenchmark·p0.999:  7155.327 us/op
                 addBenchmark·p0.9999: 9707.237 us/op
                 addBenchmark·p1.00:   10420.224 us/op

Iteration   2: 1017.671 ±(99.9%) 6.998 us/op
                 addBenchmark·p0.00:   643.072 us/op
                 addBenchmark·p0.50:   957.440 us/op
                 addBenchmark·p0.90:   1259.520 us/op
                 addBenchmark·p0.95:   1280.000 us/op
                 addBenchmark·p0.99:   1892.925 us/op
                 addBenchmark·p0.999:  3288.744 us/op
                 addBenchmark·p0.9999: 17750.845 us/op
                 addBenchmark·p1.00:   20971.520 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 38893
  mean =   1027.394 ±(99.9%) 5.415 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 38710 
    [ 2500.000,  5000.000) = 136 
    [ 5000.000,  7500.000) = 24 
    [ 7500.000, 10000.000) = 19 
    [10000.000, 12500.000) = 2 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    634.880 us/op
     p(50.0000) =    963.584 us/op
     p(90.0000) =   1173.504 us/op
     p(95.0000) =   1269.760 us/op
     p(99.0000) =   1704.182 us/op
     p(99.9000) =   5902.582 us/op
     p(99.9900) =  10467.338 us/op
     p(99.9990) =  20971.520 us/op
     p(99.9999) =  20971.520 us/op
    p(100.0000) =  20971.520 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 2, toolName = nd4j)

# Run progress: 19.05% complete, ETA 02:02:27
# Fork: 1 of 1
# Warmup Iteration   1: 237.232 ±(99.9%) 155.237 us/op
# Warmup Iteration   2: 206.457 ±(99.9%) 90.745 us/op
# Warmup Iteration   3: 229.606 ±(99.9%) 148.847 us/op
Iteration   1: 202.215 ±(99.9%) 70.158 us/op
                 addBenchmark·p0.00:   46.912 us/op
                 addBenchmark·p0.50:   177.664 us/op
                 addBenchmark·p0.90:   200.960 us/op
                 addBenchmark·p0.95:   207.104 us/op
                 addBenchmark·p0.99:   227.840 us/op
                 addBenchmark·p0.999:  451.193 us/op
                 addBenchmark·p0.9999: 2467.313 us/op
                 addBenchmark·p1.00:   1363148.800 us/op

Iteration   2: 216.209 ±(99.9%) 80.939 us/op
                 addBenchmark·p0.00:   46.912 us/op
                 addBenchmark·p0.50:   180.992 us/op
                 addBenchmark·p0.90:   201.984 us/op
                 addBenchmark·p0.95:   208.384 us/op
                 addBenchmark·p0.99:   229.120 us/op
                 addBenchmark·p0.999:  303.150 us/op
                 addBenchmark·p0.9999: 4333.955 us/op
                 addBenchmark·p1.00:   1482686.464 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 191142
  mean =    208.978 ±(99.9%) 53.331 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 191136 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 1 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 1 
    [1250000.000, 1375000.000) = 3 
    [1375000.000, 1500000.000) = 1 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     46.912 us/op
     p(50.0000) =    179.456 us/op
     p(90.0000) =    201.472 us/op
     p(95.0000) =    207.872 us/op
     p(99.0000) =    228.352 us/op
     p(99.9000) =    371.784 us/op
     p(99.9900) =   3421.915 us/op
     p(99.9990) = 1373736.251 us/op
     p(99.9999) = 1482686.464 us/op
    p(100.0000) = 1482686.464 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 2, toolName = jBlas)

# Run progress: 20.24% complete, ETA 02:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 683.599 ±(99.9%) 19.685 us/op
# Warmup Iteration   2: 712.010 ±(99.9%) 10.694 us/op
# Warmup Iteration   3: 755.781 ±(99.9%) 6.570 us/op
Iteration   1: 711.591 ±(99.9%) 8.004 us/op
                 addBenchmark·p0.00:   344.576 us/op
                 addBenchmark·p0.50:   630.784 us/op
                 addBenchmark·p0.90:   758.477 us/op
                 addBenchmark·p0.95:   2073.293 us/op
                 addBenchmark·p0.99:   2142.208 us/op
                 addBenchmark·p0.999:  4936.425 us/op
                 addBenchmark·p0.9999: 9048.225 us/op
                 addBenchmark·p1.00:   11780.096 us/op

Iteration   2: 579.174 ±(99.9%) 3.802 us/op
                 addBenchmark·p0.00:   342.528 us/op
                 addBenchmark·p0.50:   570.368 us/op
                 addBenchmark·p0.90:   596.992 us/op
                 addBenchmark·p0.95:   614.400 us/op
                 addBenchmark·p0.99:   678.912 us/op
                 addBenchmark·p0.999:  3592.888 us/op
                 addBenchmark·p0.9999: 10964.271 us/op
                 addBenchmark·p1.00:   12746.752 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 62556
  mean =    638.596 ±(99.9%) 4.248 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 60839 
    [ 1250.000,  2500.000) = 1548 
    [ 2500.000,  3750.000) = 100 
    [ 3750.000,  5000.000) = 25 
    [ 5000.000,  6250.000) = 26 
    [ 6250.000,  7500.000) = 7 
    [ 7500.000,  8750.000) = 3 
    [ 8750.000, 10000.000) = 1 
    [10000.000, 11250.000) = 4 
    [11250.000, 12500.000) = 2 
    [12500.000, 13750.000) = 1 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    342.528 us/op
     p(50.0000) =    576.512 us/op
     p(90.0000) =    667.648 us/op
     p(95.0000) =    756.736 us/op
     p(99.0000) =   2125.824 us/op
     p(99.9000) =   4051.358 us/op
     p(99.9900) =  10417.236 us/op
     p(99.9990) =  12746.752 us/op
     p(99.9999) =  12746.752 us/op
    p(100.0000) =  12746.752 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 3, toolName = commonMath3)

# Run progress: 21.43% complete, ETA 01:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 690.788 ±(99.9%) 20.056 us/op
# Warmup Iteration   2: 490.590 ±(99.9%) 3.226 us/op
# Warmup Iteration   3: 527.279 ±(99.9%) 5.370 us/op
Iteration   1: 482.999 ±(99.9%) 3.390 us/op
                 addBenchmark·p0.00:   312.832 us/op
                 addBenchmark·p0.50:   470.528 us/op
                 addBenchmark·p0.90:   504.320 us/op
                 addBenchmark·p0.95:   577.536 us/op
                 addBenchmark·p0.99:   727.040 us/op
                 addBenchmark·p0.999:  1953.427 us/op
                 addBenchmark·p0.9999: 12243.085 us/op
                 addBenchmark·p1.00:   16809.984 us/op

Iteration   2: 488.012 ±(99.9%) 4.171 us/op
                 addBenchmark·p0.00:   312.832 us/op
                 addBenchmark·p0.50:   469.504 us/op
                 addBenchmark·p0.90:   571.392 us/op
                 addBenchmark·p0.95:   630.784 us/op
                 addBenchmark·p0.99:   655.360 us/op
                 addBenchmark·p0.999:  1878.354 us/op
                 addBenchmark·p0.9999: 12357.534 us/op
                 addBenchmark·p1.00:   31162.368 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 82310
  mean =    485.493 ±(99.9%) 2.685 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 82260 
    [ 2500.000,  5000.000) = 21 
    [ 5000.000,  7500.000) = 7 
    [ 7500.000, 10000.000) = 7 
    [10000.000, 12500.000) = 10 
    [12500.000, 15000.000) = 2 
    [15000.000, 17500.000) = 2 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    312.832 us/op
     p(50.0000) =    470.016 us/op
     p(90.0000) =    520.704 us/op
     p(95.0000) =    624.640 us/op
     p(99.0000) =    707.584 us/op
     p(99.9000) =   1875.468 us/op
     p(99.9900) =  12314.434 us/op
     p(99.9990) =  31162.368 us/op
     p(99.9999) =  31162.368 us/op
    p(100.0000) =  31162.368 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 3, toolName = colt)

# Run progress: 22.62% complete, ETA 01:57:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ±(99.9%) 0.004 us/op
# Warmup Iteration   2: 0.063 ±(99.9%) 0.001 us/op
# Warmup Iteration   3: 0.066 ±(99.9%) 0.001 us/op
Iteration   1: 0.066 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.060 us/op
                 addBenchmark·p0.50:   0.065 us/op
                 addBenchmark·p0.90:   0.066 us/op
                 addBenchmark·p0.95:   0.068 us/op
                 addBenchmark·p0.99:   0.069 us/op
                 addBenchmark·p0.999:  0.071 us/op
                 addBenchmark·p0.9999: 7.742 us/op
                 addBenchmark·p1.00:   38.976 us/op

Iteration   2: 0.066 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.060 us/op
                 addBenchmark·p0.50:   0.065 us/op
                 addBenchmark·p0.90:   0.066 us/op
                 addBenchmark·p0.95:   0.068 us/op
                 addBenchmark·p0.99:   0.069 us/op
                 addBenchmark·p0.999:  0.072 us/op
                 addBenchmark·p0.9999: 2.370 us/op
                 addBenchmark·p1.00:   18.688 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 906600
  mean =      0.066 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 906503 
    [ 2.500,  5.000) = 11 
    [ 5.000,  7.500) = 3 
    [ 7.500, 10.000) = 39 
    [10.000, 12.500) = 36 
    [12.500, 15.000) = 1 
    [15.000, 17.500) = 4 
    [17.500, 20.000) = 2 
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.060 us/op
     p(50.0000) =      0.065 us/op
     p(90.0000) =      0.066 us/op
     p(95.0000) =      0.068 us/op
     p(99.0000) =      0.069 us/op
     p(99.9000) =      0.072 us/op
     p(99.9900) =      3.269 us/op
     p(99.9990) =     11.647 us/op
     p(99.9999) =     38.976 us/op
    p(100.0000) =     38.976 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 3, toolName = ejml)

# Run progress: 23.81% complete, ETA 01:55:13
# Fork: 1 of 1
# Warmup Iteration   1: 329.296 ±(99.9%) 8.475 us/op
# Warmup Iteration   2: 288.750 ±(99.9%) 4.794 us/op
# Warmup Iteration   3: 285.457 ±(99.9%) 2.701 us/op
Iteration   1: 285.770 ±(99.9%) 2.086 us/op
                 addBenchmark·p0.00:   168.960 us/op
                 addBenchmark·p0.50:   280.576 us/op
                 addBenchmark·p0.90:   308.224 us/op
                 addBenchmark·p0.95:   323.354 us/op
                 addBenchmark·p0.99:   435.200 us/op
                 addBenchmark·p0.999:  2184.077 us/op
                 addBenchmark·p0.9999: 5849.725 us/op
                 addBenchmark·p1.00:   17727.488 us/op

Iteration   2: 278.922 ±(99.9%) 1.552 us/op
                 addBenchmark·p0.00:   167.936 us/op
                 addBenchmark·p0.50:   280.064 us/op
                 addBenchmark·p0.90:   291.840 us/op
                 addBenchmark·p0.95:   312.320 us/op
                 addBenchmark·p0.99:   336.968 us/op
                 addBenchmark·p0.999:  1953.792 us/op
                 addBenchmark·p0.9999: 5592.934 us/op
                 addBenchmark·p1.00:   6389.760 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 141473
  mean =    282.305 ±(99.9%) 1.296 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 141297 
    [ 1250.000,  2500.000) = 65 
    [ 2500.000,  3750.000) = 31 
    [ 3750.000,  5000.000) = 29 
    [ 5000.000,  6250.000) = 43 
    [ 6250.000,  7500.000) = 4 
    [ 7500.000,  8750.000) = 1 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 0 
    [12500.000, 13750.000) = 1 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    167.936 us/op
     p(50.0000) =    280.064 us/op
     p(90.0000) =    300.544 us/op
     p(95.0000) =    316.416 us/op
     p(99.0000) =    429.568 us/op
     p(99.9000) =   2008.117 us/op
     p(99.9900) =   5648.857 us/op
     p(99.9990) =  16850.920 us/op
     p(99.9999) =  17727.488 us/op
    p(100.0000) =  17727.488 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 3, toolName = la4j)

# Run progress: 25.00% complete, ETA 01:53:25
# Fork: 1 of 1
# Warmup Iteration   1: 557.170 ±(99.9%) 17.941 us/op
# Warmup Iteration   2: 545.158 ±(99.9%) 7.056 us/op
# Warmup Iteration   3: 498.378 ±(99.9%) 6.880 us/op
Iteration   1: 488.235 ±(99.9%) 3.945 us/op
                 addBenchmark·p0.00:   308.224 us/op
                 addBenchmark·p0.50:   470.016 us/op
                 addBenchmark·p0.90:   551.936 us/op
                 addBenchmark·p0.95:   628.736 us/op
                 addBenchmark·p0.99:   658.432 us/op
                 addBenchmark·p0.999:  2038.743 us/op
                 addBenchmark·p0.9999: 11986.862 us/op
                 addBenchmark·p1.00:   27394.048 us/op

Iteration   2: 470.475 ±(99.9%) 2.480 us/op
                 addBenchmark·p0.00:   308.736 us/op
                 addBenchmark·p0.50:   468.992 us/op
                 addBenchmark·p0.90:   496.128 us/op
                 addBenchmark·p0.95:   505.856 us/op
                 addBenchmark·p0.99:   543.744 us/op
                 addBenchmark·p0.999:  2172.649 us/op
                 addBenchmark·p0.9999: 7340.858 us/op
                 addBenchmark·p1.00:   12566.528 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 83382
  mean =    479.191 ±(99.9%) 2.313 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 83311 
    [ 2500.000,  5000.000) = 35 
    [ 5000.000,  7500.000) = 24 
    [ 7500.000, 10000.000) = 3 
    [10000.000, 12500.000) = 6 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 1 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    308.224 us/op
     p(50.0000) =    469.504 us/op
     p(90.0000) =    504.832 us/op
     p(95.0000) =    567.296 us/op
     p(99.0000) =    650.240 us/op
     p(99.9000) =   2026.779 us/op
     p(99.9900) =  11421.773 us/op
     p(99.9990) =  27394.048 us/op
     p(99.9999) =  27394.048 us/op
    p(100.0000) =  27394.048 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 3, toolName = nd4j)

# Run progress: 26.19% complete, ETA 01:51:38
# Fork: 1 of 1
# Warmup Iteration   1: 123.215 ±(99.9%) 64.515 us/op
# Warmup Iteration   2: 112.170 ±(99.9%) 35.266 us/op
# Warmup Iteration   3: 131.691 ±(99.9%) 81.823 us/op
Iteration   1: 122.067 ±(99.9%) 46.626 us/op
                 addBenchmark·p0.00:   31.936 us/op
                 addBenchmark·p0.50:   101.248 us/op
                 addBenchmark·p0.90:   112.768 us/op
                 addBenchmark·p0.95:   115.968 us/op
                 addBenchmark·p0.99:   125.312 us/op
                 addBenchmark·p0.999:  152.320 us/op
                 addBenchmark·p0.9999: 1785.346 us/op
                 addBenchmark·p1.00:   1415577.600 us/op

Iteration   2: 120.458 ±(99.9%) 40.444 us/op
                 addBenchmark·p0.00:   32.544 us/op
                 addBenchmark·p0.50:   102.656 us/op
                 addBenchmark·p0.90:   112.896 us/op
                 addBenchmark·p0.95:   116.480 us/op
                 addBenchmark·p0.99:   141.312 us/op
                 addBenchmark·p0.999:  321.536 us/op
                 addBenchmark·p0.9999: 3632.969 us/op
                 addBenchmark·p1.00:   1449132.032 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 329386
  mean =    121.257 ±(99.9%) 30.833 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 329381 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 1 
    [1250000.000, 1375000.000) = 1 
    [1375000.000, 1500000.000) = 3 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     31.936 us/op
     p(50.0000) =    102.016 us/op
     p(90.0000) =    112.896 us/op
     p(95.0000) =    116.224 us/op
     p(99.0000) =    131.072 us/op
     p(99.9000) =    275.968 us/op
     p(99.9900) =   2629.302 us/op
     p(99.9990) = 1397088.898 us/op
     p(99.9999) = 1449132.032 us/op
    p(100.0000) = 1449132.032 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 3, toolName = jBlas)

# Run progress: 27.38% complete, ETA 01:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 342.622 ±(99.9%) 17.932 us/op
# Warmup Iteration   2: 282.343 ±(99.9%) 2.179 us/op
# Warmup Iteration   3: 310.459 ±(99.9%) 3.222 us/op
Iteration   1: 366.635 ±(99.9%) 1.863 us/op
                 addBenchmark·p0.00:   177.920 us/op
                 addBenchmark·p0.50:   374.784 us/op
                 addBenchmark·p0.90:   393.216 us/op
                 addBenchmark·p0.95:   401.408 us/op
                 addBenchmark·p0.99:   429.056 us/op
                 addBenchmark·p0.999:  2217.288 us/op
                 addBenchmark·p0.9999: 6119.276 us/op
                 addBenchmark·p1.00:   10485.760 us/op

Iteration   2: 367.661 ±(99.9%) 2.624 us/op
                 addBenchmark·p0.00:   168.448 us/op
                 addBenchmark·p0.50:   372.224 us/op
                 addBenchmark·p0.90:   400.384 us/op
                 addBenchmark·p0.95:   478.720 us/op
                 addBenchmark·p0.99:   549.888 us/op
                 addBenchmark·p0.999:  1821.227 us/op
                 addBenchmark·p0.9999: 7044.375 us/op
                 addBenchmark·p1.00:   27951.104 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 108824
  mean =    367.147 ±(99.9%) 1.608 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 108740 
    [ 2500.000,  5000.000) = 59 
    [ 5000.000,  7500.000) = 18 
    [ 7500.000, 10000.000) = 2 
    [10000.000, 12500.000) = 4 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    168.448 us/op
     p(50.0000) =    373.760 us/op
     p(90.0000) =    395.776 us/op
     p(95.0000) =    409.088 us/op
     p(99.0000) =    543.744 us/op
     p(99.9000) =   1886.106 us/op
     p(99.9900) =   6258.196 us/op
     p(99.9990) =  26539.917 us/op
     p(99.9999) =  27951.104 us/op
    p(100.0000) =  27951.104 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 4, toolName = commonMath3)

# Run progress: 28.57% complete, ETA 01:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 282.742 ±(99.9%) 15.086 us/op
# Warmup Iteration   2: 216.968 ±(99.9%) 2.383 us/op
# Warmup Iteration   3: 212.529 ±(99.9%) 1.954 us/op
Iteration   1: 197.297 ±(99.9%) 1.304 us/op
                 addBenchmark·p0.00:   129.664 us/op
                 addBenchmark·p0.50:   197.632 us/op
                 addBenchmark·p0.90:   212.480 us/op
                 addBenchmark·p0.95:   231.936 us/op
                 addBenchmark·p0.99:   263.168 us/op
                 addBenchmark·p0.999:  321.197 us/op
                 addBenchmark·p0.9999: 6491.575 us/op
                 addBenchmark·p1.00:   21233.664 us/op

Iteration   2: 203.608 ±(99.9%) 1.322 us/op
                 addBenchmark·p0.00:   128.768 us/op
                 addBenchmark·p0.50:   199.680 us/op
                 addBenchmark·p0.90:   243.968 us/op
                 addBenchmark·p0.95:   261.120 us/op
                 addBenchmark·p0.99:   273.920 us/op
                 addBenchmark·p0.999:  337.267 us/op
                 addBenchmark·p0.9999: 4463.124 us/op
                 addBenchmark·p1.00:   24412.160 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 199311
  mean =    200.402 ±(99.9%) 0.929 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 199268 
    [ 2500.000,  5000.000) = 24 
    [ 5000.000,  7500.000) = 4 
    [ 7500.000, 10000.000) = 9 
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 2 
    [15000.000, 17500.000) = 2 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    128.768 us/op
     p(50.0000) =    198.656 us/op
     p(90.0000) =    230.912 us/op
     p(95.0000) =    253.440 us/op
     p(99.0000) =    269.824 us/op
     p(99.9000) =    332.800 us/op
     p(99.9900) =   4893.245 us/op
     p(99.9990) =  21255.532 us/op
     p(99.9999) =  24412.160 us/op
    p(100.0000) =  24412.160 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 4, toolName = colt)

# Run progress: 29.76% complete, ETA 01:46:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.063 ±(99.9%) 0.005 us/op
# Warmup Iteration   3: 0.060 ±(99.9%) 0.001 us/op
Iteration   1: 0.059 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.054 us/op
                 addBenchmark·p0.50:   0.058 us/op
                 addBenchmark·p0.90:   0.060 us/op
                 addBenchmark·p0.95:   0.060 us/op
                 addBenchmark·p0.99:   0.062 us/op
                 addBenchmark·p0.999:  0.064 us/op
                 addBenchmark·p0.9999: 2.142 us/op
                 addBenchmark·p1.00:   18.816 us/op

Iteration   2: 0.059 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.054 us/op
                 addBenchmark·p0.50:   0.058 us/op
                 addBenchmark·p0.90:   0.060 us/op
                 addBenchmark·p0.95:   0.060 us/op
                 addBenchmark·p0.99:   0.062 us/op
                 addBenchmark·p0.999:  0.065 us/op
                 addBenchmark·p0.9999: 1.973 us/op
                 addBenchmark·p1.00:   34.752 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1052743
  mean =      0.059 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 1052664 
    [ 2.500,  5.000) = 11 
    [ 5.000,  7.500) = 0 
    [ 7.500, 10.000) = 27 
    [10.000, 12.500) = 31 
    [12.500, 15.000) = 1 
    [15.000, 17.500) = 4 
    [17.500, 20.000) = 2 
    [20.000, 22.500) = 1 
    [22.500, 25.000) = 1 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 1 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.054 us/op
     p(50.0000) =      0.058 us/op
     p(90.0000) =      0.060 us/op
     p(95.0000) =      0.060 us/op
     p(99.0000) =      0.062 us/op
     p(99.9000) =      0.065 us/op
     p(99.9900) =      1.993 us/op
     p(99.9990) =     13.569 us/op
     p(99.9999) =     34.187 us/op
    p(100.0000) =     34.752 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 4, toolName = ejml)

# Run progress: 30.95% complete, ETA 01:44:32
# Fork: 1 of 1
# Warmup Iteration   1: 118.390 ±(99.9%) 2.985 us/op
# Warmup Iteration   2: 111.216 ±(99.9%) 0.945 us/op
# Warmup Iteration   3: 103.963 ±(99.9%) 1.329 us/op
Iteration   1: 106.489 ±(99.9%) 0.956 us/op
                 addBenchmark·p0.00:   62.912 us/op
                 addBenchmark·p0.50:   102.272 us/op
                 addBenchmark·p0.90:   128.896 us/op
                 addBenchmark·p0.95:   147.712 us/op
                 addBenchmark·p0.99:   166.400 us/op
                 addBenchmark·p0.999:  242.432 us/op
                 addBenchmark·p0.9999: 6119.424 us/op
                 addBenchmark·p1.00:   22609.920 us/op

Iteration   2: 105.927 ±(99.9%) 0.786 us/op
                 addBenchmark·p0.00:   62.592 us/op
                 addBenchmark·p0.50:   102.656 us/op
                 addBenchmark·p0.90:   125.568 us/op
                 addBenchmark·p0.95:   145.152 us/op
                 addBenchmark·p0.99:   164.352 us/op
                 addBenchmark·p0.999:  201.356 us/op
                 addBenchmark·p0.9999: 5443.292 us/op
                 addBenchmark·p1.00:   18448.384 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 375866
  mean =    106.207 ±(99.9%) 0.618 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 375734 
    [ 2500.000,  5000.000) = 64 
    [ 5000.000,  7500.000) = 58 
    [ 7500.000, 10000.000) = 2 
    [10000.000, 12500.000) = 4 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 2 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     62.592 us/op
     p(50.0000) =    102.400 us/op
     p(90.0000) =    126.976 us/op
     p(95.0000) =    146.432 us/op
     p(99.0000) =    165.376 us/op
     p(99.9000) =    227.874 us/op
     p(99.9900) =   5510.375 us/op
     p(99.9990) =  15657.445 us/op
     p(99.9999) =  22609.920 us/op
    p(100.0000) =  22609.920 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 4, toolName = la4j)

# Run progress: 32.14% complete, ETA 01:42:42
# Fork: 1 of 1
# Warmup Iteration   1: 255.544 ±(99.9%) 9.587 us/op
# Warmup Iteration   2: 227.345 ±(99.9%) 2.399 us/op
# Warmup Iteration   3: 224.458 ±(99.9%) 2.091 us/op
Iteration   1: 223.414 ±(99.9%) 1.578 us/op
                 addBenchmark·p0.00:   134.144 us/op
                 addBenchmark·p0.50:   221.184 us/op
                 addBenchmark·p0.90:   251.136 us/op
                 addBenchmark·p0.95:   265.728 us/op
                 addBenchmark·p0.99:   298.496 us/op
                 addBenchmark·p0.999:  351.849 us/op
                 addBenchmark·p0.9999: 6572.660 us/op
                 addBenchmark·p1.00:   18513.920 us/op

Iteration   2: 208.174 ±(99.9%) 1.005 us/op
                 addBenchmark·p0.00:   134.656 us/op
                 addBenchmark·p0.50:   208.384 us/op
                 addBenchmark·p0.90:   229.120 us/op
                 addBenchmark·p0.95:   240.640 us/op
                 addBenchmark·p0.99:   258.816 us/op
                 addBenchmark·p0.999:  769.622 us/op
                 addBenchmark·p0.9999: 6129.417 us/op
                 addBenchmark·p1.00:   7086.080 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 185329
  mean =    215.525 ±(99.9%) 0.924 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 185221 
    [ 1250.000,  2500.000) = 31 
    [ 2500.000,  3750.000) = 35 
    [ 3750.000,  5000.000) = 7 
    [ 5000.000,  6250.000) = 18 
    [ 6250.000,  7500.000) = 11 
    [ 7500.000,  8750.000) = 1 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 1 
    [12500.000, 13750.000) = 2 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 1 

  Percentiles, us/op:
      p(0.0000) =    134.144 us/op
     p(50.0000) =    212.480 us/op
     p(90.0000) =    243.456 us/op
     p(95.0000) =    253.440 us/op
     p(99.0000) =    288.256 us/op
     p(99.9000) =    458.097 us/op
     p(99.9900) =   6130.901 us/op
     p(99.9990) =  15927.534 us/op
     p(99.9999) =  18513.920 us/op
    p(100.0000) =  18513.920 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 4, toolName = nd4j)

# Run progress: 33.33% complete, ETA 01:40:54
# Fork: 1 of 1
# Warmup Iteration   1: 65.402 ±(99.9%) 31.485 us/op
# Warmup Iteration   2: 73.003 ±(99.9%) 0.635 us/op
# Warmup Iteration   3: 84.189 ±(99.9%) 41.060 us/op
Iteration   1: 52.312 ±(99.9%) 15.100 us/op
                 addBenchmark·p0.00:   19.744 us/op
                 addBenchmark·p0.50:   47.808 us/op
                 addBenchmark·p0.90:   54.144 us/op
                 addBenchmark·p0.95:   57.152 us/op
                 addBenchmark·p0.99:   106.240 us/op
                 addBenchmark·p0.999:  164.096 us/op
                 addBenchmark·p0.9999: 2497.398 us/op
                 addBenchmark·p1.00:   1348468.736 us/op

Iteration   2: 53.341 ±(99.9%) 18.284 us/op
                 addBenchmark·p0.00:   19.616 us/op
                 addBenchmark·p0.50:   48.256 us/op
                 addBenchmark·p0.90:   53.888 us/op
                 addBenchmark·p0.95:   56.064 us/op
                 addBenchmark·p0.99:   67.840 us/op
                 addBenchmark·p0.999:  82.176 us/op
                 addBenchmark·p0.9999: 1385.578 us/op
                 addBenchmark·p1.00:   1725956.096 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 755439
  mean =     52.822 ±(99.9%) 11.835 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 755435 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 1 
    [1125000.000, 1250000.000) = 1 
    [1250000.000, 1375000.000) = 1 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 1 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     19.616 us/op
     p(50.0000) =     48.064 us/op
     p(90.0000) =     54.016 us/op
     p(95.0000) =     56.576 us/op
     p(99.0000) =     74.368 us/op
     p(99.9000) =    159.488 us/op
     p(99.9900) =   2109.440 us/op
     p(99.9990) =   4321.090 us/op
     p(99.9999) = 1725956.096 us/op
    p(100.0000) = 1725956.096 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 4, toolName = jBlas)

# Run progress: 34.52% complete, ETA 01:39:09
# Fork: 1 of 1
# Warmup Iteration   1: 113.507 ±(99.9%) 3.341 us/op
# Warmup Iteration   2: 100.905 ±(99.9%) 0.932 us/op
# Warmup Iteration   3: 100.358 ±(99.9%) 0.779 us/op
Iteration   1: 102.236 ±(99.9%) 0.746 us/op
                 addBenchmark·p0.00:   61.248 us/op
                 addBenchmark·p0.50:   99.328 us/op
                 addBenchmark·p0.90:   111.232 us/op
                 addBenchmark·p0.95:   127.488 us/op
                 addBenchmark·p0.99:   162.816 us/op
                 addBenchmark·p0.999:  186.051 us/op
                 addBenchmark·p0.9999: 4841.079 us/op
                 addBenchmark·p1.00:   23166.976 us/op

Iteration   2: 100.151 ±(99.9%) 0.526 us/op
                 addBenchmark·p0.00:   61.696 us/op
                 addBenchmark·p0.50:   98.304 us/op
                 addBenchmark·p0.90:   109.952 us/op
                 addBenchmark·p0.95:   112.768 us/op
                 addBenchmark·p0.99:   138.496 us/op
                 addBenchmark·p0.999:  163.072 us/op
                 addBenchmark·p0.9999: 4810.454 us/op
                 addBenchmark·p1.00:   5603.328 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 394526
  mean =    101.183 ±(99.9%) 0.455 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 394434 
    [ 2500.000,  5000.000) = 62 
    [ 5000.000,  7500.000) = 26 
    [ 7500.000, 10000.000) = 1 
    [10000.000, 12500.000) = 1 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 1 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     61.248 us/op
     p(50.0000) =     98.816 us/op
     p(90.0000) =    110.464 us/op
     p(95.0000) =    116.864 us/op
     p(99.0000) =    152.576 us/op
     p(99.9000) =    180.857 us/op
     p(99.9900) =   4833.280 us/op
     p(99.9990) =   9285.500 us/op
     p(99.9999) =  23166.976 us/op
    p(100.0000) =  23166.976 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 5, toolName = commonMath3)

# Run progress: 35.71% complete, ETA 01:37:21
# Fork: 1 of 1
# Warmup Iteration   1: 205.155 ±(99.9%) 6.952 us/op
# Warmup Iteration   2: 152.783 ±(99.9%) 1.367 us/op
# Warmup Iteration   3: 147.851 ±(99.9%) 1.975 us/op
Iteration   1: 153.003 ±(99.9%) 1.145 us/op
                 addBenchmark·p0.00:   93.824 us/op
                 addBenchmark·p0.50:   144.640 us/op
                 addBenchmark·p0.90:   190.976 us/op
                 addBenchmark·p0.95:   203.264 us/op
                 addBenchmark·p0.99:   228.864 us/op
                 addBenchmark·p0.999:  405.803 us/op
                 addBenchmark·p0.9999: 6821.950 us/op
                 addBenchmark·p1.00:   15122.432 us/op

Iteration   2: 140.715 ±(99.9%) 1.143 us/op
                 addBenchmark·p0.00:   92.800 us/op
                 addBenchmark·p0.50:   139.008 us/op
                 addBenchmark·p0.90:   153.600 us/op
                 addBenchmark·p0.95:   167.936 us/op
                 addBenchmark·p0.99:   191.232 us/op
                 addBenchmark·p0.999:  240.384 us/op
                 addBenchmark·p0.9999: 4582.819 us/op
                 addBenchmark·p1.00:   37027.840 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 272351
  mean =    146.601 ±(99.9%) 0.811 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 272274 
    [ 2500.000,  5000.000) = 51 
    [ 5000.000,  7500.000) = 10 
    [ 7500.000, 10000.000) = 5 
    [10000.000, 12500.000) = 5 
    [12500.000, 15000.000) = 4 
    [15000.000, 17500.000) = 1 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     92.800 us/op
     p(50.0000) =    141.824 us/op
     p(90.0000) =    177.920 us/op
     p(95.0000) =    191.744 us/op
     p(99.0000) =    222.720 us/op
     p(99.9000) =    306.328 us/op
     p(99.9900) =   4962.425 us/op
     p(99.9990) =  14434.891 us/op
     p(99.9999) =  37027.840 us/op
    p(100.0000) =  37027.840 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 5, toolName = colt)

# Run progress: 36.90% complete, ETA 01:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ±(99.9%) 0.005 us/op
# Warmup Iteration   2: 0.067 ±(99.9%) 0.001 us/op
# Warmup Iteration   3: 0.070 ±(99.9%) 0.001 us/op
Iteration   1: 0.069 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.062 us/op
                 addBenchmark·p0.50:   0.068 us/op
                 addBenchmark·p0.90:   0.070 us/op
                 addBenchmark·p0.95:   0.070 us/op
                 addBenchmark·p0.99:   0.071 us/op
                 addBenchmark·p0.999:  0.073 us/op
                 addBenchmark·p0.9999: 8.932 us/op
                 addBenchmark·p1.00:   33.472 us/op

Iteration   2: 0.069 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.062 us/op
                 addBenchmark·p0.50:   0.068 us/op
                 addBenchmark·p0.90:   0.070 us/op
                 addBenchmark·p0.95:   0.070 us/op
                 addBenchmark·p0.99:   0.071 us/op
                 addBenchmark·p0.999:  0.073 us/op
                 addBenchmark·p0.9999: 3.145 us/op
                 addBenchmark·p1.00:   21.408 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 843834
  mean =      0.069 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  2.500) = 843736 
    [ 2.500,  5.000) = 9 
    [ 5.000,  7.500) = 2 
    [ 7.500, 10.000) = 27 
    [10.000, 12.500) = 51 
    [12.500, 15.000) = 1 
    [15.000, 17.500) = 5 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 1 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 1 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 1 
    [35.000, 37.500) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.062 us/op
     p(50.0000) =      0.068 us/op
     p(90.0000) =      0.070 us/op
     p(95.0000) =      0.070 us/op
     p(99.0000) =      0.071 us/op
     p(99.9000) =      0.073 us/op
     p(99.9900) =      7.798 us/op
     p(99.9990) =     14.550 us/op
     p(99.9999) =     33.472 us/op
    p(100.0000) =     33.472 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 5, toolName = ejml)

# Run progress: 38.10% complete, ETA 01:33:44
# Fork: 1 of 1
# Warmup Iteration   1: 83.408 ±(99.9%) 3.018 us/op
# Warmup Iteration   2: 73.922 ±(99.9%) 0.572 us/op
# Warmup Iteration   3: 71.893 ±(99.9%) 0.845 us/op
Iteration   1: 70.962 ±(99.9%) 0.503 us/op
                 addBenchmark·p0.00:   43.648 us/op
                 addBenchmark·p0.50:   67.200 us/op
                 addBenchmark·p0.90:   79.104 us/op
                 addBenchmark·p0.95:   96.384 us/op
                 addBenchmark·p0.99:   116.224 us/op
                 addBenchmark·p0.999:  133.085 us/op
                 addBenchmark·p0.9999: 3721.400 us/op
                 addBenchmark·p1.00:   16875.520 us/op

Iteration   2: 83.509 ±(99.9%) 0.593 us/op
                 addBenchmark·p0.00:   43.904 us/op
                 addBenchmark·p0.50:   82.048 us/op
                 addBenchmark·p0.90:   105.088 us/op
                 addBenchmark·p0.95:   108.800 us/op
                 addBenchmark·p0.99:   118.400 us/op
                 addBenchmark·p0.999:  140.800 us/op
                 addBenchmark·p0.9999: 3931.695 us/op
                 addBenchmark·p1.00:   16580.608 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 520118
  mean =     76.727 ±(99.9%) 0.386 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 519982 
    [ 1250.000,  2500.000) = 66 
    [ 2500.000,  3750.000) = 18 
    [ 3750.000,  5000.000) = 7 
    [ 5000.000,  6250.000) = 26 
    [ 6250.000,  7500.000) = 9 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 1 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 0 
    [12500.000, 13750.000) = 4 
    [13750.000, 15000.000) = 1 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 2 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     43.648 us/op
     p(50.0000) =     72.064 us/op
     p(90.0000) =    100.352 us/op
     p(95.0000) =    106.624 us/op
     p(99.0000) =    116.864 us/op
     p(99.9000) =    139.264 us/op
     p(99.9900) =   3775.878 us/op
     p(99.9990) =  13453.780 us/op
     p(99.9999) =  16875.520 us/op
    p(100.0000) =  16875.520 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 5, toolName = la4j)

# Run progress: 39.29% complete, ETA 01:31:54
# Fork: 1 of 1
# Warmup Iteration   1: 185.703 ±(99.9%) 6.275 us/op
# Warmup Iteration   2: 200.494 ±(99.9%) 1.797 us/op
# Warmup Iteration   3: 185.016 ±(99.9%) 1.268 us/op
Iteration   1: 174.856 ±(99.9%) 1.168 us/op
                 addBenchmark·p0.00:   97.664 us/op
                 addBenchmark·p0.50:   154.880 us/op
                 addBenchmark·p0.90:   212.224 us/op
                 addBenchmark·p0.95:   343.040 us/op
                 addBenchmark·p0.99:   363.520 us/op
                 addBenchmark·p0.999:  425.589 us/op
                 addBenchmark·p0.9999: 4996.277 us/op
                 addBenchmark·p1.00:   16973.824 us/op

Iteration   2: 153.231 ±(99.9%) 0.782 us/op
                 addBenchmark·p0.00:   97.920 us/op
                 addBenchmark·p0.50:   150.528 us/op
                 addBenchmark·p0.90:   186.880 us/op
                 addBenchmark·p0.95:   198.656 us/op
                 addBenchmark·p0.99:   221.471 us/op
                 addBenchmark·p0.999:  384.365 us/op
                 addBenchmark·p0.9999: 4417.362 us/op
                 addBenchmark·p1.00:   13582.336 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 244479
  mean =    163.332 ±(99.9%) 0.690 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 244387 
    [ 1250.000,  2500.000) = 40 
    [ 2500.000,  3750.000) = 22 
    [ 3750.000,  5000.000) = 8 
    [ 5000.000,  6250.000) = 8 
    [ 6250.000,  7500.000) = 7 
    [ 7500.000,  8750.000) = 2 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 0 
    [12500.000, 13750.000) = 3 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 1 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     97.664 us/op
     p(50.0000) =    152.576 us/op
     p(90.0000) =    198.912 us/op
     p(95.0000) =    217.856 us/op
     p(99.0000) =    358.912 us/op
     p(99.9000) =    400.384 us/op
     p(99.9900) =   4297.916 us/op
     p(99.9990) =  14455.590 us/op
     p(99.9999) =  16973.824 us/op
    p(100.0000) =  16973.824 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 5, toolName = nd4j)

# Run progress: 40.48% complete, ETA 01:30:05
# Fork: 1 of 1
# Warmup Iteration   1: 44.791 ±(99.9%) 0.288 us/op
# Warmup Iteration   2: 49.303 ±(99.9%) 34.176 us/op
# Warmup Iteration   3: 44.369 ±(99.9%) 22.036 us/op
Iteration   1: 31.687 ±(99.9%) 6.131 us/op
                 addBenchmark·p0.00:   17.376 us/op
                 addBenchmark·p0.50:   21.088 us/op
                 addBenchmark·p0.90:   39.680 us/op
                 addBenchmark·p0.95:   48.960 us/op
                 addBenchmark·p0.99:   73.088 us/op
                 addBenchmark·p0.999:  541.434 us/op
                 addBenchmark·p0.9999: 2712.063 us/op
                 addBenchmark·p1.00:   529006.592 us/op

Iteration   2: 27.682 ±(99.9%) 6.049 us/op
                 addBenchmark·p0.00:   17.344 us/op
                 addBenchmark·p0.50:   19.872 us/op
                 addBenchmark·p0.90:   36.480 us/op
                 addBenchmark·p0.95:   41.984 us/op
                 addBenchmark·p0.99:   75.008 us/op
                 addBenchmark·p0.999:  183.525 us/op
                 addBenchmark·p0.9999: 2367.225 us/op
                 addBenchmark·p1.00:   488112.128 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 709481
  mean =     29.570 ±(99.9%) 4.310 us/op

  Histogram, us/op:
    [     0.000,  50000.000) = 709477 
    [ 50000.000, 100000.000) = 0 
    [100000.000, 150000.000) = 0 
    [150000.000, 200000.000) = 0 
    [200000.000, 250000.000) = 0 
    [250000.000, 300000.000) = 0 
    [300000.000, 350000.000) = 1 
    [350000.000, 400000.000) = 0 
    [400000.000, 450000.000) = 0 
    [450000.000, 500000.000) = 2 
    [500000.000, 550000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =     17.344 us/op
     p(50.0000) =     20.352 us/op
     p(90.0000) =     38.144 us/op
     p(95.0000) =     44.480 us/op
     p(99.0000) =     73.984 us/op
     p(99.9000) =    260.626 us/op
     p(99.9900) =   2625.536 us/op
     p(99.9990) =   4963.014 us/op
     p(99.9999) = 529006.592 us/op
    p(100.0000) = 529006.592 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 5, toolName = jBlas)

# Run progress: 41.67% complete, ETA 01:28:20
# Fork: 1 of 1
# Warmup Iteration   1: 78.877 ±(99.9%) 2.415 us/op
# Warmup Iteration   2: 74.523 ±(99.9%) 0.838 us/op
# Warmup Iteration   3: 69.370 ±(99.9%) 0.562 us/op
Iteration   1: 70.747 ±(99.9%) 0.494 us/op
                 addBenchmark·p0.00:   43.264 us/op
                 addBenchmark·p0.50:   67.456 us/op
                 addBenchmark·p0.90:   79.104 us/op
                 addBenchmark·p0.95:   86.528 us/op
                 addBenchmark·p0.99:   114.048 us/op
                 addBenchmark·p0.999:  128.901 us/op
                 addBenchmark·p0.9999: 4821.875 us/op
                 addBenchmark·p1.00:   13271.040 us/op

Iteration   2: 70.841 ±(99.9%) 0.479 us/op
                 addBenchmark·p0.00:   43.200 us/op
                 addBenchmark·p0.50:   67.584 us/op
                 addBenchmark·p0.90:   79.232 us/op
                 addBenchmark·p0.95:   87.808 us/op
                 addBenchmark·p0.99:   114.432 us/op
                 addBenchmark·p0.999:  128.256 us/op
                 addBenchmark·p0.9999: 4890.624 us/op
                 addBenchmark·p1.00:   11763.712 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 563599
  mean =     70.794 ±(99.9%) 0.344 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 563422 
    [ 1250.000,  2500.000) = 58 
    [ 2500.000,  3750.000) = 36 
    [ 3750.000,  5000.000) = 37 
    [ 5000.000,  6250.000) = 35 
    [ 6250.000,  7500.000) = 3 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 2 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 2 
    [12500.000, 13750.000) = 3 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     43.200 us/op
     p(50.0000) =     67.456 us/op
     p(90.0000) =     79.232 us/op
     p(95.0000) =     87.168 us/op
     p(99.0000) =    114.176 us/op
     p(99.9000) =    128.384 us/op
     p(99.9900) =   4830.331 us/op
     p(99.9990) =  11321.475 us/op
     p(99.9999) =  13271.040 us/op
    p(100.0000) =  13271.040 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 6, toolName = commonMath3)

# Run progress: 42.86% complete, ETA 01:26:33
# Fork: 1 of 1
# Warmup Iteration   1: 49.243 ±(99.9%) 3.211 us/op
# Warmup Iteration   2: 41.957 ±(99.9%) 0.551 us/op
# Warmup Iteration   3: 36.763 ±(99.9%) 0.889 us/op
Iteration   1: 32.963 ±(99.9%) 0.332 us/op
                 addBenchmark·p0.00:   23.584 us/op
                 addBenchmark·p0.50:   30.688 us/op
                 addBenchmark·p0.90:   38.592 us/op
                 addBenchmark·p0.95:   41.728 us/op
                 addBenchmark·p0.99:   50.112 us/op
                 addBenchmark·p0.999:  135.424 us/op
                 addBenchmark·p0.9999: 1887.281 us/op
                 addBenchmark·p1.00:   14401.536 us/op

Iteration   2: 33.454 ±(99.9%) 0.340 us/op
                 addBenchmark·p0.00:   21.952 us/op
                 addBenchmark·p0.50:   30.720 us/op
                 addBenchmark·p0.90:   40.384 us/op
                 addBenchmark·p0.95:   43.712 us/op
                 addBenchmark·p0.99:   54.464 us/op
                 addBenchmark·p0.999:  112.810 us/op
                 addBenchmark·p0.9999: 1496.538 us/op
                 addBenchmark·p1.00:   12173.312 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 603809
  mean =     33.206 ±(99.9%) 0.238 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 603735 
    [ 1250.000,  2500.000) = 35 
    [ 2500.000,  3750.000) = 8 
    [ 3750.000,  5000.000) = 12 
    [ 5000.000,  6250.000) = 10 
    [ 6250.000,  7500.000) = 1 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 1 
    [10000.000, 11250.000) = 2 
    [11250.000, 12500.000) = 4 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 1 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     21.952 us/op
     p(50.0000) =     30.720 us/op
     p(90.0000) =     39.616 us/op
     p(95.0000) =     42.752 us/op
     p(99.0000) =     51.840 us/op
     p(99.9000) =    123.776 us/op
     p(99.9900) =   1715.345 us/op
     p(99.9990) =  11028.459 us/op
     p(99.9999) =  14401.536 us/op
    p(100.0000) =  14401.536 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 6, toolName = colt)

# Run progress: 44.05% complete, ETA 01:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ±(99.9%) 0.003 us/op
# Warmup Iteration   2: 0.072 ±(99.9%) 0.002 us/op
# Warmup Iteration   3: 0.071 ±(99.9%) 0.001 us/op
Iteration   1: 0.070 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.066 us/op
                 addBenchmark·p0.50:   0.070 us/op
                 addBenchmark·p0.90:   0.071 us/op
                 addBenchmark·p0.95:   0.072 us/op
                 addBenchmark·p0.99:   0.072 us/op
                 addBenchmark·p0.999:  0.075 us/op
                 addBenchmark·p0.9999: 2.049 us/op
                 addBenchmark·p1.00:   47.360 us/op

Iteration   2: 0.070 ±(99.9%) 0.001 us/op
                 addBenchmark·p0.00:   0.066 us/op
                 addBenchmark·p0.50:   0.070 us/op
                 addBenchmark·p0.90:   0.071 us/op
                 addBenchmark·p0.95:   0.072 us/op
                 addBenchmark·p0.99:   0.072 us/op
                 addBenchmark·p0.999:  0.075 us/op
                 addBenchmark·p0.9999: 1.886 us/op
                 addBenchmark·p1.00:   48.192 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1577784
  mean =      0.070 ±(99.9%) 0.001 us/op

  Histogram, us/op:
    [ 0.000,  5.000) = 1577692 
    [ 5.000, 10.000) = 32 
    [10.000, 15.000) = 48 
    [15.000, 20.000) = 6 
    [20.000, 25.000) = 2 
    [25.000, 30.000) = 0 
    [30.000, 35.000) = 2 
    [35.000, 40.000) = 0 
    [40.000, 45.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      0.066 us/op
     p(50.0000) =      0.070 us/op
     p(90.0000) =      0.071 us/op
     p(95.0000) =      0.072 us/op
     p(99.0000) =      0.072 us/op
     p(99.9000) =      0.075 us/op
     p(99.9900) =      1.936 us/op
     p(99.9990) =     12.124 us/op
     p(99.9999) =     47.711 us/op
    p(100.0000) =     48.192 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 6, toolName = ejml)

# Run progress: 45.24% complete, ETA 01:22:55
# Fork: 1 of 1
# Warmup Iteration   1: 17.493 ±(99.9%) 2.076 us/op
# Warmup Iteration   2: 16.445 ±(99.9%) 0.917 us/op
# Warmup Iteration   3: 13.856 ±(99.9%) 0.430 us/op
Iteration   1: 14.401 ±(99.9%) 0.316 us/op
                 addBenchmark·p0.00:   10.096 us/op
                 addBenchmark·p0.50:   12.960 us/op
                 addBenchmark·p0.90:   15.552 us/op
                 addBenchmark·p0.95:   22.080 us/op
                 addBenchmark·p0.99:   25.536 us/op
                 addBenchmark·p0.999:  72.448 us/op
                 addBenchmark·p0.9999: 1725.021 us/op
                 addBenchmark·p1.00:   21725.184 us/op

Iteration   2: 13.754 ±(99.9%) 0.271 us/op
                 addBenchmark·p0.00:   10.096 us/op
                 addBenchmark·p0.50:   12.960 us/op
                 addBenchmark·p0.90:   14.064 us/op
                 addBenchmark·p0.95:   15.056 us/op
                 addBenchmark·p0.99:   20.128 us/op
                 addBenchmark·p0.999:  33.953 us/op
                 addBenchmark·p0.9999: 1758.994 us/op
                 addBenchmark·p1.00:   13762.560 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 721855
  mean =     14.069 ±(99.9%) 0.207 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 721807 
    [ 2500.000,  5000.000) = 23 
    [ 5000.000,  7500.000) = 21 
    [ 7500.000, 10000.000) = 0 
    [10000.000, 12500.000) = 1 
    [12500.000, 15000.000) = 2 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     10.096 us/op
     p(50.0000) =     12.960 us/op
     p(90.0000) =     14.480 us/op
     p(95.0000) =     16.800 us/op
     p(99.0000) =     24.640 us/op
     p(99.9000) =     70.144 us/op
     p(99.9900) =   1727.581 us/op
     p(99.9990) =   6297.637 us/op
     p(99.9999) =  21725.184 us/op
    p(100.0000) =  21725.184 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 6, toolName = la4j)

# Run progress: 46.43% complete, ETA 01:21:07
# Fork: 1 of 1
# Warmup Iteration   1: 38.825 ±(99.9%) 2.324 us/op
# Warmup Iteration   2: 36.504 ±(99.9%) 1.284 us/op
# Warmup Iteration   3: 31.868 ±(99.9%) 0.612 us/op
Iteration   1: 32.146 ±(99.9%) 0.482 us/op
                 addBenchmark·p0.00:   21.280 us/op
                 addBenchmark·p0.50:   29.408 us/op
                 addBenchmark·p0.90:   39.360 us/op
                 addBenchmark·p0.95:   41.728 us/op
                 addBenchmark·p0.99:   49.536 us/op
                 addBenchmark·p0.999:  93.824 us/op
                 addBenchmark·p0.9999: 1634.510 us/op
                 addBenchmark·p1.00:   25427.968 us/op

Iteration   2: 30.745 ±(99.9%) 0.483 us/op
                 addBenchmark·p0.00:   21.184 us/op
                 addBenchmark·p0.50:   29.088 us/op
                 addBenchmark·p0.90:   34.240 us/op
                 addBenchmark·p0.95:   36.864 us/op
                 addBenchmark·p0.99:   42.880 us/op
                 addBenchmark·p0.999:  56.320 us/op
                 addBenchmark·p0.9999: 1049.667 us/op
                 addBenchmark·p1.00:   33619.968 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 639023
  mean =     31.430 ±(99.9%) 0.342 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 638979 
    [ 2500.000,  5000.000) = 20 
    [ 5000.000,  7500.000) = 13 
    [ 7500.000, 10000.000) = 0 
    [10000.000, 12500.000) = 4 
    [12500.000, 15000.000) = 3 
    [15000.000, 17500.000) = 1 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 1 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 1 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     21.184 us/op
     p(50.0000) =     29.248 us/op
     p(90.0000) =     36.480 us/op
     p(95.0000) =     40.128 us/op
     p(99.0000) =     46.528 us/op
     p(99.9000) =     90.880 us/op
     p(99.9900) =   1436.199 us/op
     p(99.9990) =  12600.895 us/op
     p(99.9999) =  33619.968 us/op
    p(100.0000) =  33619.968 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 6, toolName = nd4j)

# Run progress: 47.62% complete, ETA 01:19:19
# Fork: 1 of 1
# Warmup Iteration   1: 29.213 ±(99.9%) 0.361 us/op
# Warmup Iteration   2: 30.457 ±(99.9%) 0.696 us/op
# Warmup Iteration   3: 37.988 ±(99.9%) 27.542 us/op
Iteration   1: 33.947 ±(99.9%) 0.201 us/op
                 addBenchmark·p0.00:   14.160 us/op
                 addBenchmark·p0.50:   33.088 us/op
                 addBenchmark·p0.90:   38.848 us/op
                 addBenchmark·p0.95:   43.136 us/op
                 addBenchmark·p0.99:   76.928 us/op
                 addBenchmark·p0.999:  134.444 us/op
                 addBenchmark·p0.9999: 1703.017 us/op
                 addBenchmark·p1.00:   4481.024 us/op

Iteration   2: 38.737 ±(99.9%) 14.496 us/op
                 addBenchmark·p0.00:   14.736 us/op
                 addBenchmark·p0.50:   33.408 us/op
                 addBenchmark·p0.90:   39.872 us/op
                 addBenchmark·p0.95:   47.360 us/op
                 addBenchmark·p0.99:   81.920 us/op
                 addBenchmark·p0.999:  161.865 us/op
                 addBenchmark·p0.9999: 1971.258 us/op
                 addBenchmark·p1.00:   1210056.704 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 569543
  mean =     36.257 ±(99.9%) 6.993 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 569542 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 1 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     14.160 us/op
     p(50.0000) =     33.280 us/op
     p(90.0000) =     39.232 us/op
     p(95.0000) =     44.928 us/op
     p(99.0000) =     79.488 us/op
     p(99.9000) =    146.944 us/op
     p(99.9900) =   1886.208 us/op
     p(99.9990) =   4525.933 us/op
     p(99.9999) = 1210056.704 us/op
    p(100.0000) = 1210056.704 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark
# Parameters: (n = 6, toolName = jBlas)

# Run progress: 48.81% complete, ETA 01:17:33
# Fork: 1 of 1
# Warmup Iteration   1: 18.325 ±(99.9%) 1.192 us/op
# Warmup Iteration   2: 14.936 ±(99.9%) 0.715 us/op
# Warmup Iteration   3: 14.162 ±(99.9%) 0.593 us/op
Iteration   1: 18.073 ±(99.9%) 0.284 us/op
                 addBenchmark·p0.00:   10.064 us/op
                 addBenchmark·p0.50:   16.544 us/op
                 addBenchmark·p0.90:   22.432 us/op
                 addBenchmark·p0.95:   24.736 us/op
                 addBenchmark·p0.99:   37.184 us/op
                 addBenchmark·p0.999:  61.568 us/op
                 addBenchmark·p0.9999: 275.347 us/op
                 addBenchmark·p1.00:   31162.368 us/op

Iteration   2: 17.174 ±(99.9%) 0.241 us/op
                 addBenchmark·p0.00:   10.064 us/op
                 addBenchmark·p0.50:   16.384 us/op
                 addBenchmark·p0.90:   19.776 us/op
                 addBenchmark·p0.95:   27.520 us/op
                 addBenchmark·p0.99:   31.328 us/op
                 addBenchmark·p0.999:  48.990 us/op
                 addBenchmark·p0.9999: 80.992 us/op
                 addBenchmark·p1.00:   31457.280 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.addBenchmark":
  N = 1137277
  mean =     17.613 ±(99.9%) 0.185 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 1137234 
    [ 2500.000,  5000.000) = 18 
    [ 5000.000,  7500.000) = 17 
    [ 7500.000, 10000.000) = 2 
    [10000.000, 12500.000) = 1 
    [12500.000, 15000.000) = 2 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     10.064 us/op
     p(50.0000) =     16.480 us/op
     p(90.0000) =     20.608 us/op
     p(95.0000) =     26.304 us/op
     p(99.0000) =     34.496 us/op
     p(99.9000) =     57.216 us/op
     p(99.9900) =    223.441 us/op
     p(99.9990) =   6927.378 us/op
     p(99.9999) =  31416.795 us/op
    p(100.0000) =  31457.280 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 0, toolName = commonMath3)

# Run progress: 50.00% complete, ETA 01:15:46
# Fork: 1 of 1
# Warmup Iteration   1: 1269.885 ±(99.9%) 11.910 us/op
# Warmup Iteration   2: 1278.522 ±(99.9%) 3.545 us/op
# Warmup Iteration   3: 1272.848 ±(99.9%) 3.972 us/op
Iteration   1: 1251.036 ±(99.9%) 4.159 us/op
                 mulBenchmark·p0.00:   1144.832 us/op
                 mulBenchmark·p0.50:   1247.232 us/op
                 mulBenchmark·p0.90:   1282.048 us/op
                 mulBenchmark·p0.95:   1298.432 us/op
                 mulBenchmark·p0.99:   1380.352 us/op
                 mulBenchmark·p0.999:  2213.384 us/op
                 mulBenchmark·p0.9999: 12679.460 us/op
                 mulBenchmark·p1.00:   12992.512 us/op

Iteration   2: 1270.851 ±(99.9%) 40.560 us/op
                 mulBenchmark·p0.00:   1130.496 us/op
                 mulBenchmark·p0.50:   1249.280 us/op
                 mulBenchmark·p0.90:   1316.864 us/op
                 mulBenchmark·p0.95:   1335.296 us/op
                 mulBenchmark·p0.99:   1390.592 us/op
                 mulBenchmark·p0.999:  1528.029 us/op
                 mulBenchmark·p0.9999: 86726.731 us/op
                 mulBenchmark·p1.00:   194772.992 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 31693
  mean =   1260.867 ±(99.9%) 20.229 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 31691 
    [ 12500.000,  25000.000) = 1 
    [ 25000.000,  37500.000) = 0 
    [ 37500.000,  50000.000) = 0 
    [ 50000.000,  62500.000) = 0 
    [ 62500.000,  75000.000) = 0 
    [ 75000.000,  87500.000) = 0 
    [ 87500.000, 100000.000) = 0 
    [100000.000, 112500.000) = 0 
    [112500.000, 125000.000) = 0 
    [125000.000, 137500.000) = 0 
    [137500.000, 150000.000) = 0 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1130.496 us/op
     p(50.0000) =   1247.232 us/op
     p(90.0000) =   1302.528 us/op
     p(95.0000) =   1325.056 us/op
     p(99.0000) =   1386.496 us/op
     p(99.9000) =   2007.015 us/op
     p(99.9900) =  12063.008 us/op
     p(99.9990) = 194772.992 us/op
     p(99.9999) = 194772.992 us/op
    p(100.0000) = 194772.992 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 0, toolName = colt)

# Run progress: 51.19% complete, ETA 01:13:58
# Fork: 1 of 1
# Warmup Iteration   1: 1052.014 ±(99.9%) 8.165 us/op
# Warmup Iteration   2: 1068.856 ±(99.9%) 3.536 us/op
# Warmup Iteration   3: 1067.661 ±(99.9%) 3.351 us/op
Iteration   1: 1071.486 ±(99.9%) 19.840 us/op
                 mulBenchmark·p0.00:   1020.928 us/op
                 mulBenchmark·p0.50:   1058.816 us/op
                 mulBenchmark·p0.90:   1075.200 us/op
                 mulBenchmark·p0.95:   1081.344 us/op
                 mulBenchmark·p0.99:   1124.352 us/op
                 mulBenchmark·p0.999:  2369.389 us/op
                 mulBenchmark·p0.9999: 30482.052 us/op
                 mulBenchmark·p1.00:   111017.984 us/op

Iteration   2: 1055.557 ±(99.9%) 4.097 us/op
                 mulBenchmark·p0.00:   1026.048 us/op
                 mulBenchmark·p0.50:   1050.624 us/op
                 mulBenchmark·p0.90:   1062.912 us/op
                 mulBenchmark·p0.95:   1067.008 us/op
                 mulBenchmark·p0.99:   1097.093 us/op
                 mulBenchmark·p0.999:  1200.411 us/op
                 mulBenchmark·p0.9999: 16878.179 us/op
                 mulBenchmark·p1.00:   17858.560 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 37577
  mean =   1063.462 ±(99.9%) 10.059 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 37573 
    [ 12500.000,  25000.000) = 3 
    [ 25000.000,  37500.000) = 0 
    [ 37500.000,  50000.000) = 0 
    [ 50000.000,  62500.000) = 0 
    [ 62500.000,  75000.000) = 0 
    [ 75000.000,  87500.000) = 0 
    [ 87500.000, 100000.000) = 0 
    [100000.000, 112500.000) = 1 
    [112500.000, 125000.000) = 0 
    [125000.000, 137500.000) = 0 
    [137500.000, 150000.000) = 0 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1020.928 us/op
     p(50.0000) =   1054.720 us/op
     p(90.0000) =   1071.104 us/op
     p(95.0000) =   1077.248 us/op
     p(99.0000) =   1110.016 us/op
     p(99.9000) =   1345.536 us/op
     p(99.9900) =  17026.702 us/op
     p(99.9990) = 111017.984 us/op
     p(99.9999) = 111017.984 us/op
    p(100.0000) = 111017.984 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 0, toolName = ejml)

# Run progress: 52.38% complete, ETA 01:12:09
# Fork: 1 of 1
# Warmup Iteration   1: 779.619 ±(99.9%) 5.046 us/op
# Warmup Iteration   2: 775.751 ±(99.9%) 6.895 us/op
# Warmup Iteration   3: 776.540 ±(99.9%) 52.644 us/op
Iteration   1: 763.865 ±(99.9%) 8.030 us/op
                 mulBenchmark·p0.00:   733.184 us/op
                 mulBenchmark·p0.50:   750.592 us/op
                 mulBenchmark·p0.90:   770.048 us/op
                 mulBenchmark·p0.95:   804.864 us/op
                 mulBenchmark·p0.99:   953.344 us/op
                 mulBenchmark·p0.999:  1465.700 us/op
                 mulBenchmark·p0.9999: 26791.510 us/op
                 mulBenchmark·p1.00:   43057.152 us/op

Iteration   2: 741.299 ±(99.9%) 0.862 us/op
                 mulBenchmark·p0.00:   719.872 us/op
                 mulBenchmark·p0.50:   738.304 us/op
                 mulBenchmark·p0.90:   753.664 us/op
                 mulBenchmark·p0.95:   758.784 us/op
                 mulBenchmark·p0.99:   778.240 us/op
                 mulBenchmark·p0.999:  918.733 us/op
                 mulBenchmark·p0.9999: 3271.721 us/op
                 mulBenchmark·p1.00:   4018.176 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 53121
  mean =    752.413 ±(99.9%) 3.982 us/op

  Histogram, us/op:
    [    0.000,  5000.000) = 53117 
    [ 5000.000, 10000.000) = 0 
    [10000.000, 15000.000) = 0 
    [15000.000, 20000.000) = 2 
    [20000.000, 25000.000) = 0 
    [25000.000, 30000.000) = 0 
    [30000.000, 35000.000) = 0 
    [35000.000, 40000.000) = 0 
    [40000.000, 45000.000) = 2 

  Percentiles, us/op:
      p(0.0000) =    719.872 us/op
     p(50.0000) =    745.472 us/op
     p(90.0000) =    761.856 us/op
     p(95.0000) =    774.144 us/op
     p(99.0000) =    834.560 us/op
     p(99.9000) =   1391.387 us/op
     p(99.9900) =   4013.061 us/op
     p(99.9990) =  43057.152 us/op
     p(99.9999) =  43057.152 us/op
    p(100.0000) =  43057.152 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 0, toolName = la4j)

# Run progress: 53.57% complete, ETA 01:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 3661.620 ±(99.9%) 144.599 us/op
# Warmup Iteration   2: 2981.600 ±(99.9%) 49.691 us/op
# Warmup Iteration   3: 2962.992 ±(99.9%) 43.860 us/op
Iteration   1: 3044.329 ±(99.9%) 27.821 us/op
                 mulBenchmark·p0.00:   2752.512 us/op
                 mulBenchmark·p0.50:   2912.256 us/op
                 mulBenchmark·p0.90:   2990.080 us/op
                 mulBenchmark·p0.95:   4210.688 us/op
                 mulBenchmark·p0.99:   4300.800 us/op
                 mulBenchmark·p0.999:  13472.694 us/op
                 mulBenchmark·p0.9999: 28377.088 us/op
                 mulBenchmark·p1.00:   28377.088 us/op

Iteration   2: 2938.769 ±(99.9%) 15.096 us/op
                 mulBenchmark·p0.00:   2793.472 us/op
                 mulBenchmark·p0.50:   2908.160 us/op
                 mulBenchmark·p0.90:   2953.216 us/op
                 mulBenchmark·p0.95:   2969.600 us/op
                 mulBenchmark·p0.99:   3260.416 us/op
                 mulBenchmark·p0.999:  9496.166 us/op
                 mulBenchmark·p0.9999: 15761.408 us/op
                 mulBenchmark·p1.00:   15761.408 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 13364
  mean =   2990.625 ±(99.9%) 15.745 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 0 
    [ 2500.000,  5000.000) = 13288 
    [ 5000.000,  7500.000) = 39 
    [ 7500.000, 10000.000) = 24 
    [10000.000, 12500.000) = 6 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 4 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   2752.512 us/op
     p(50.0000) =   2908.160 us/op
     p(90.0000) =   2961.408 us/op
     p(95.0000) =   3103.744 us/op
     p(99.0000) =   4276.224 us/op
     p(99.9000) =  10026.516 us/op
     p(99.9900) =  25675.612 us/op
     p(99.9990) =  28377.088 us/op
     p(99.9999) =  28377.088 us/op
    p(100.0000) =  28377.088 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 0, toolName = nd4j)

# Run progress: 54.76% complete, ETA 01:08:32
# Fork: 1 of 1
# Warmup Iteration   1: 95.388 ±(99.9%) 0.889 us/op
# Warmup Iteration   2: 94.062 ±(99.9%) 1.264 us/op
# Warmup Iteration   3: 92.953 ±(99.9%) 0.921 us/op
Iteration   1: 92.738 ±(99.9%) 0.527 us/op
                 mulBenchmark·p0.00:   65.536 us/op
                 mulBenchmark·p0.50:   91.392 us/op
                 mulBenchmark·p0.90:   99.712 us/op
                 mulBenchmark·p0.95:   103.296 us/op
                 mulBenchmark·p0.99:   116.352 us/op
                 mulBenchmark·p0.999:  131.072 us/op
                 mulBenchmark·p0.9999: 2084.782 us/op
                 mulBenchmark·p1.00:   20086.784 us/op

Iteration   2: 92.108 ±(99.9%) 0.314 us/op
                 mulBenchmark·p0.00:   65.920 us/op
                 mulBenchmark·p0.50:   90.880 us/op
                 mulBenchmark·p0.90:   99.328 us/op
                 mulBenchmark·p0.95:   103.296 us/op
                 mulBenchmark·p0.99:   116.608 us/op
                 mulBenchmark·p0.999:  129.536 us/op
                 mulBenchmark·p0.9999: 1654.784 us/op
                 mulBenchmark·p1.00:   7036.928 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 432145
  mean =     92.422 ±(99.9%) 0.306 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 432117 
    [ 2500.000,  5000.000) = 11 
    [ 5000.000,  7500.000) = 13 
    [ 7500.000, 10000.000) = 1 
    [10000.000, 12500.000) = 1 
    [12500.000, 15000.000) = 1 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     65.536 us/op
     p(50.0000) =     91.136 us/op
     p(90.0000) =     99.584 us/op
     p(95.0000) =    103.296 us/op
     p(99.0000) =    116.480 us/op
     p(99.9000) =    130.432 us/op
     p(99.9900) =   1665.024 us/op
     p(99.9990) =   7441.838 us/op
     p(99.9999) =  20086.784 us/op
    p(100.0000) =  20086.784 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 0, toolName = jBlas)

# Run progress: 55.95% complete, ETA 01:06:45
# Fork: 1 of 1
# Warmup Iteration   1: 146.962 ±(99.9%) 10.432 us/op
# Warmup Iteration   2: 161.814 ±(99.9%) 2.774 us/op
# Warmup Iteration   3: 116.827 ±(99.9%) 1.204 us/op
Iteration   1: 115.037 ±(99.9%) 0.862 us/op
                 mulBenchmark·p0.00:   92.928 us/op
                 mulBenchmark·p0.50:   107.392 us/op
                 mulBenchmark·p0.90:   122.880 us/op
                 mulBenchmark·p0.95:   132.608 us/op
                 mulBenchmark·p0.99:   239.360 us/op
                 mulBenchmark·p0.999:  266.752 us/op
                 mulBenchmark·p0.9999: 2843.478 us/op
                 mulBenchmark·p1.00:   28868.608 us/op

Iteration   2: 113.839 ±(99.9%) 0.583 us/op
                 mulBenchmark·p0.00:   93.056 us/op
                 mulBenchmark·p0.50:   107.136 us/op
                 mulBenchmark·p0.90:   122.880 us/op
                 mulBenchmark·p0.95:   130.560 us/op
                 mulBenchmark·p0.99:   238.848 us/op
                 mulBenchmark·p0.999:  266.240 us/op
                 mulBenchmark·p0.9999: 2781.184 us/op
                 mulBenchmark·p1.00:   17137.664 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 348975
  mean =    114.435 ±(99.9%) 0.519 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 348932 
    [ 2500.000,  5000.000) = 30 
    [ 5000.000,  7500.000) = 3 
    [ 7500.000, 10000.000) = 4 
    [10000.000, 12500.000) = 2 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 2 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     92.928 us/op
     p(50.0000) =    107.264 us/op
     p(90.0000) =    122.880 us/op
     p(95.0000) =    131.328 us/op
     p(99.0000) =    239.104 us/op
     p(99.9000) =    266.252 us/op
     p(99.9900) =   2784.539 us/op
     p(99.9990) =  16800.646 us/op
     p(99.9999) =  28868.608 us/op
    p(100.0000) =  28868.608 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 1, toolName = commonMath3)

# Run progress: 57.14% complete, ETA 01:04:56
# Fork: 1 of 1
# Warmup Iteration   1: 17246978.048 us/op
# Warmup Iteration   2: 17548967.936 us/op
# Warmup Iteration   3: 18220056.576 us/op
Iteration   1: 16122904.576 us/op
                 mulBenchmark·p0.00:   15871246.336 us/op
                 mulBenchmark·p0.50:   16122904.576 us/op
                 mulBenchmark·p0.90:   16374562.816 us/op
                 mulBenchmark·p0.95:   16374562.816 us/op
                 mulBenchmark·p0.99:   16374562.816 us/op
                 mulBenchmark·p0.999:  16374562.816 us/op
                 mulBenchmark·p0.9999: 16374562.816 us/op
                 mulBenchmark·p1.00:   16374562.816 us/op

Iteration   2: 18807259.136 us/op
                 mulBenchmark·p0.00:   18522046.464 us/op
                 mulBenchmark·p0.50:   18807259.136 us/op
                 mulBenchmark·p0.90:   19092471.808 us/op
                 mulBenchmark·p0.95:   19092471.808 us/op
                 mulBenchmark·p0.99:   19092471.808 us/op
                 mulBenchmark·p0.999:  19092471.808 us/op
                 mulBenchmark·p0.9999: 19092471.808 us/op
                 mulBenchmark·p1.00:   19092471.808 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 4
  mean = 17465081.856 ±(99.9%) 10213974.717 us/op

  Histogram, us/op:
    [15000000.000, 15500000.000) = 0 
    [15500000.000, 16000000.000) = 1 
    [16000000.000, 16500000.000) = 1 
    [16500000.000, 17000000.000) = 0 
    [17000000.000, 17500000.000) = 0 
    [17500000.000, 18000000.000) = 0 
    [18000000.000, 18500000.000) = 0 
    [18500000.000, 19000000.000) = 1 
    [19000000.000, 19500000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 15871246.336 us/op
     p(50.0000) = 17448304.640 us/op
     p(90.0000) = 19092471.808 us/op
     p(95.0000) = 19092471.808 us/op
     p(99.0000) = 19092471.808 us/op
     p(99.9000) = 19092471.808 us/op
     p(99.9900) = 19092471.808 us/op
     p(99.9990) = 19092471.808 us/op
     p(99.9999) = 19092471.808 us/op
    p(100.0000) = 19092471.808 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 1, toolName = colt)

# Run progress: 58.33% complete, ETA 01:03:45
# Fork: 1 of 1
# Warmup Iteration   1: 1063465.779 ±(99.9%) 106852.644 us/op
# Warmup Iteration   2: 1015755.571 ±(99.9%) 19170.521 us/op
# Warmup Iteration   3: 1014077.850 ±(99.9%) 26235.486 us/op
Iteration   1: 1003696.947 ±(99.9%) 7752.101 us/op
                 mulBenchmark·p0.00:   985661.440 us/op
                 mulBenchmark·p0.50:   1003487.232 us/op
                 mulBenchmark·p0.90:   1012819.558 us/op
                 mulBenchmark·p0.95:   1024878.182 us/op
                 mulBenchmark·p0.99:   1025507.328 us/op
                 mulBenchmark·p0.999:  1025507.328 us/op
                 mulBenchmark·p0.9999: 1025507.328 us/op
                 mulBenchmark·p1.00:   1025507.328 us/op

Iteration   2: 993201.201 ±(99.9%) 7346.528 us/op
                 mulBenchmark·p0.00:   982515.712 us/op
                 mulBenchmark·p0.50:   990904.320 us/op
                 mulBenchmark·p0.90:   1007471.821 us/op
                 mulBenchmark·p0.95:   1008625.254 us/op
                 mulBenchmark·p0.99:   1008730.112 us/op
                 mulBenchmark·p0.999:  1008730.112 us/op
                 mulBenchmark·p0.9999: 1008730.112 us/op
                 mulBenchmark·p1.00:   1008730.112 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 41
  mean = 998321.077 ±(99.9%) 5663.929 us/op

  Histogram, us/op:
    [ 980000.000,  985000.000) = 4 
    [ 985000.000,  990000.000) = 7 
    [ 990000.000,  995000.000) = 7 
    [ 995000.000, 1000000.000) = 2 
    [1000000.000, 1005000.000) = 10 
    [1005000.000, 1010000.000) = 7 
    [1010000.000, 1015000.000) = 3 
    [1015000.000, 1020000.000) = 0 
    [1020000.000, 1025000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 982515.712 us/op
     p(50.0000) = 1001390.080 us/op
     p(90.0000) = 1010407.834 us/op
     p(95.0000) = 1012819.558 us/op
     p(99.0000) = 1025507.328 us/op
     p(99.9000) = 1025507.328 us/op
     p(99.9900) = 1025507.328 us/op
     p(99.9990) = 1025507.328 us/op
     p(99.9999) = 1025507.328 us/op
    p(100.0000) = 1025507.328 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 1, toolName = ejml)

# Run progress: 59.52% complete, ETA 01:01:57
# Fork: 1 of 1
# Warmup Iteration   1: 772351.122 ±(99.9%) 49331.720 us/op
# Warmup Iteration   2: 744713.655 ±(99.9%) 6977.550 us/op
# Warmup Iteration   3: 743290.587 ±(99.9%) 9862.291 us/op
Iteration   1: 769291.815 ±(99.9%) 17024.822 us/op
                 mulBenchmark·p0.00:   739246.080 us/op
                 mulBenchmark·p0.50:   765984.768 us/op
                 mulBenchmark·p0.90:   805830.656 us/op
                 mulBenchmark·p0.95:   812908.544 us/op
                 mulBenchmark·p0.99:   814743.552 us/op
                 mulBenchmark·p0.999:  814743.552 us/op
                 mulBenchmark·p0.9999: 814743.552 us/op
                 mulBenchmark·p1.00:   814743.552 us/op

Iteration   2: 748527.919 ±(99.9%) 15830.178 us/op
                 mulBenchmark·p0.00:   732954.624 us/op
                 mulBenchmark·p0.50:   740294.656 us/op
                 mulBenchmark·p0.90:   769654.784 us/op
                 mulBenchmark·p0.95:   816840.704 us/op
                 mulBenchmark·p0.99:   839909.376 us/op
                 mulBenchmark·p0.999:  839909.376 us/op
                 mulBenchmark·p0.9999: 839909.376 us/op
                 mulBenchmark·p1.00:   839909.376 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 53
  mean = 758713.982 ±(99.9%) 11901.265 us/op

  Histogram, us/op:
    [700000.000, 712500.000) = 0 
    [712500.000, 725000.000) = 0 
    [725000.000, 737500.000) = 11 
    [737500.000, 750000.000) = 18 
    [750000.000, 762500.000) = 4 
    [762500.000, 775000.000) = 7 
    [775000.000, 787500.000) = 5 
    [787500.000, 800000.000) = 4 
    [800000.000, 812500.000) = 2 
    [812500.000, 825000.000) = 1 
    [825000.000, 837500.000) = 0 
    [837500.000, 850000.000) = 1 
    [850000.000, 862500.000) = 0 
    [862500.000, 875000.000) = 0 
    [875000.000, 887500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 732954.624 us/op
     p(50.0000) = 746586.112 us/op
     p(90.0000) = 792304.026 us/op
     p(95.0000) = 811073.536 us/op
     p(99.0000) = 839909.376 us/op
     p(99.9000) = 839909.376 us/op
     p(99.9900) = 839909.376 us/op
     p(99.9990) = 839909.376 us/op
     p(99.9999) = 839909.376 us/op
    p(100.0000) = 839909.376 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 1, toolName = la4j)

# Run progress: 60.71% complete, ETA 01:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 3496651.435 ±(99.9%) 9834297.291 us/op
# Warmup Iteration   2: 2788163.584 ±(99.9%) 749606.256 us/op
# Warmup Iteration   3: 2865758.208 ±(99.9%) 1231423.074 us/op
Iteration   1: 2768240.640 ±(99.9%) 97277.355 us/op
                 mulBenchmark·p0.00:   2705326.080 us/op
                 mulBenchmark·p0.50:   2770337.792 us/op
                 mulBenchmark·p0.90:   2864709.632 us/op
                 mulBenchmark·p0.95:   2864709.632 us/op
                 mulBenchmark·p0.99:   2864709.632 us/op
                 mulBenchmark·p0.999:  2864709.632 us/op
                 mulBenchmark·p0.9999: 2864709.632 us/op
                 mulBenchmark·p1.00:   2864709.632 us/op

Iteration   2: 2872499.054 ±(99.9%) 272283.676 us/op
                 mulBenchmark·p0.00:   2705326.080 us/op
                 mulBenchmark·p0.50:   2831155.200 us/op
                 mulBenchmark·p0.90:   3061841.920 us/op
                 mulBenchmark·p0.95:   3061841.920 us/op
                 mulBenchmark·p0.99:   3061841.920 us/op
                 mulBenchmark·p0.999:  3061841.920 us/op
                 mulBenchmark·p0.9999: 3061841.920 us/op
                 mulBenchmark·p1.00:   3061841.920 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 15
  mean = 2816894.566 ±(99.9%) 109320.511 us/op

  Histogram, us/op:
    [2700000.000, 2725000.000) = 3 
    [2725000.000, 2750000.000) = 1 
    [2750000.000, 2775000.000) = 1 
    [2775000.000, 2800000.000) = 3 
    [2800000.000, 2825000.000) = 2 
    [2825000.000, 2850000.000) = 1 
    [2850000.000, 2875000.000) = 1 
    [2875000.000, 2900000.000) = 0 
    [2900000.000, 2925000.000) = 1 
    [2925000.000, 2950000.000) = 0 
    [2950000.000, 2975000.000) = 0 
    [2975000.000, 3000000.000) = 1 
    [3000000.000, 3025000.000) = 0 
    [3025000.000, 3050000.000) = 0 
    [3050000.000, 3075000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 2705326.080 us/op
     p(50.0000) = 2789212.160 us/op
     p(90.0000) = 3011510.272 us/op
     p(95.0000) = 3061841.920 us/op
     p(99.0000) = 3061841.920 us/op
     p(99.9000) = 3061841.920 us/op
     p(99.9900) = 3061841.920 us/op
     p(99.9990) = 3061841.920 us/op
     p(99.9999) = 3061841.920 us/op
    p(100.0000) = 3061841.920 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 1, toolName = nd4j)

# Run progress: 61.90% complete, ETA 00:58:22
# Fork: 1 of 1
# Warmup Iteration   1: 14017.971 ±(99.9%) 150.615 us/op
# Warmup Iteration   2: 13551.544 ±(99.9%) 37.289 us/op
# Warmup Iteration   3: 13579.509 ±(99.9%) 44.378 us/op
Iteration   1: 13712.161 ±(99.9%) 82.685 us/op
                 mulBenchmark·p0.00:   12992.512 us/op
                 mulBenchmark·p0.50:   13565.952 us/op
                 mulBenchmark·p0.90:   13910.016 us/op
                 mulBenchmark·p0.95:   14205.747 us/op
                 mulBenchmark·p0.99:   18575.196 us/op
                 mulBenchmark·p0.999:  28110.717 us/op
                 mulBenchmark·p0.9999: 30081.024 us/op
                 mulBenchmark·p1.00:   30081.024 us/op

Iteration   2: 13612.461 ±(99.9%) 63.395 us/op
                 mulBenchmark·p0.00:   12992.512 us/op
                 mulBenchmark·p0.50:   13533.184 us/op
                 mulBenchmark·p0.90:   13795.328 us/op
                 mulBenchmark·p0.95:   13926.400 us/op
                 mulBenchmark·p0.99:   15178.138 us/op
                 mulBenchmark·p0.999:  27430.093 us/op
                 mulBenchmark·p0.9999: 30048.256 us/op
                 mulBenchmark·p1.00:   30048.256 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 2927
  mean =  13662.123 ±(99.9%) 52.072 us/op

  Histogram, us/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 2878 
    [15000.000, 17500.000) = 21 
    [17500.000, 20000.000) = 11 
    [20000.000, 22500.000) = 10 
    [22500.000, 25000.000) = 4 
    [25000.000, 27500.000) = 1 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  12992.512 us/op
     p(50.0000) =  13549.568 us/op
     p(90.0000) =  13860.864 us/op
     p(95.0000) =  14024.704 us/op
     p(99.0000) =  16817.848 us/op
     p(99.9000) =  26095.124 us/op
     p(99.9900) =  30081.024 us/op
     p(99.9990) =  30081.024 us/op
     p(99.9999) =  30081.024 us/op
    p(100.0000) =  30081.024 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 1, toolName = jBlas)

# Run progress: 63.10% complete, ETA 00:56:32
# Fork: 1 of 1
# Warmup Iteration   1: 33735.697 ±(99.9%) 1995.597 us/op
# Warmup Iteration   2: 39165.824 ±(99.9%) 2328.532 us/op
# Warmup Iteration   3: 31874.289 ±(99.9%) 508.949 us/op
Iteration   1: 32063.698 ±(99.9%) 527.134 us/op
                 mulBenchmark·p0.00:   25427.968 us/op
                 mulBenchmark·p0.50:   31227.904 us/op
                 mulBenchmark·p0.90:   34963.456 us/op
                 mulBenchmark·p0.95:   40779.776 us/op
                 mulBenchmark·p0.99:   50708.480 us/op
                 mulBenchmark·p0.999:  57999.360 us/op
                 mulBenchmark·p0.9999: 57999.360 us/op
                 mulBenchmark·p1.00:   57999.360 us/op

Iteration   2: 32514.647 ±(99.9%) 596.882 us/op
                 mulBenchmark·p0.00:   26017.792 us/op
                 mulBenchmark·p0.50:   31326.208 us/op
                 mulBenchmark·p0.90:   36188.979 us/op
                 mulBenchmark·p0.95:   44512.051 us/op
                 mulBenchmark·p0.99:   49744.445 us/op
                 mulBenchmark·p0.999:  53018.624 us/op
                 mulBenchmark·p0.9999: 53018.624 us/op
                 mulBenchmark·p1.00:   53018.624 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 1239
  mean =  32287.535 ±(99.9%) 397.264 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 12 
    [27500.000, 30000.000) = 306 
    [30000.000, 32500.000) = 562 
    [32500.000, 35000.000) = 222 
    [35000.000, 37500.000) = 45 
    [37500.000, 40000.000) = 15 
    [40000.000, 42500.000) = 18 
    [42500.000, 45000.000) = 21 
    [45000.000, 47500.000) = 7 
    [47500.000, 50000.000) = 19 
    [50000.000, 52500.000) = 6 
    [52500.000, 55000.000) = 4 
    [55000.000, 57500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  25427.968 us/op
     p(50.0000) =  31293.440 us/op
     p(90.0000) =  35454.976 us/op
     p(95.0000) =  42336.256 us/op
     p(99.0000) =  50082.611 us/op
     p(99.9000) =  57936.445 us/op
     p(99.9900) =  57999.360 us/op
     p(99.9990) =  57999.360 us/op
     p(99.9999) =  57999.360 us/op
    p(100.0000) =  57999.360 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 2, toolName = commonMath3)

# Run progress: 64.29% complete, ETA 00:54:41
# Fork: 1 of 1
# Warmup Iteration   1: 1621997.275 ±(99.9%) 242988.989 us/op
# Warmup Iteration   2: 1535714.450 ±(99.9%) 397237.295 us/op
# Warmup Iteration   3: 1585147.319 ±(99.9%) 415175.400 us/op
Iteration   1: 1509088.110 ±(99.9%) 375107.145 us/op
                 mulBenchmark·p0.00:   459800.576 us/op
                 mulBenchmark·p0.50:   1568669.696 us/op
                 mulBenchmark·p0.90:   1825570.816 us/op
                 mulBenchmark·p0.95:   1866465.280 us/op
                 mulBenchmark·p0.99:   1866465.280 us/op
                 mulBenchmark·p0.999:  1866465.280 us/op
                 mulBenchmark·p0.9999: 1866465.280 us/op
                 mulBenchmark·p1.00:   1866465.280 us/op

Iteration   2: 1567056.502 ±(99.9%) 338822.143 us/op
                 mulBenchmark·p0.00:   700448.768 us/op
                 mulBenchmark·p0.50:   1625292.800 us/op
                 mulBenchmark·p0.90:   1810681.037 us/op
                 mulBenchmark·p0.95:   1835008.000 us/op
                 mulBenchmark·p0.99:   1835008.000 us/op
                 mulBenchmark·p0.999:  1835008.000 us/op
                 mulBenchmark·p0.9999: 1835008.000 us/op
                 mulBenchmark·p1.00:   1835008.000 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 27
  mean = 1536998.817 ±(99.9%) 217659.475 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 0 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 1 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 1 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 2 
    [1375000.000, 1500000.000) = 3 
    [1500000.000, 1625000.000) = 7 
    [1625000.000, 1750000.000) = 8 
    [1750000.000, 1875000.000) = 5 

  Percentiles, us/op:
      p(0.0000) = 459800.576 us/op
     p(50.0000) = 1610612.736 us/op
     p(90.0000) = 1794742.682 us/op
     p(95.0000) = 1853882.368 us/op
     p(99.0000) = 1866465.280 us/op
     p(99.9000) = 1866465.280 us/op
     p(99.9900) = 1866465.280 us/op
     p(99.9990) = 1866465.280 us/op
     p(99.9999) = 1866465.280 us/op
    p(100.0000) = 1866465.280 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 2, toolName = colt)

# Run progress: 65.48% complete, ETA 00:52:53
# Fork: 1 of 1
# Warmup Iteration   1: 265082.772 ±(99.9%) 13186.221 us/op
# Warmup Iteration   2: 259872.085 ±(99.9%) 2406.182 us/op
# Warmup Iteration   3: 261001.321 ±(99.9%) 1942.286 us/op
Iteration   1: 259287.303 ±(99.9%) 1893.876 us/op
                 mulBenchmark·p0.00:   253755.392 us/op
                 mulBenchmark·p0.50:   258211.840 us/op
                 mulBenchmark·p0.90:   263035.290 us/op
                 mulBenchmark·p0.95:   266220.339 us/op
                 mulBenchmark·p0.99:   290455.552 us/op
                 mulBenchmark·p0.999:  290455.552 us/op
                 mulBenchmark·p0.9999: 290455.552 us/op
                 mulBenchmark·p1.00:   290455.552 us/op

Iteration   2: 256941.450 ±(99.9%) 3082.948 us/op
                 mulBenchmark·p0.00:   250609.664 us/op
                 mulBenchmark·p0.50:   255852.544 us/op
                 mulBenchmark·p0.90:   259024.486 us/op
                 mulBenchmark·p0.95:   262589.645 us/op
                 mulBenchmark·p0.99:   321912.832 us/op
                 mulBenchmark·p0.999:  321912.832 us/op
                 mulBenchmark·p0.9999: 321912.832 us/op
                 mulBenchmark·p1.00:   321912.832 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 156
  mean = 258114.376 ±(99.9%) 1795.957 us/op

  Histogram, us/op:
    [250000.000, 255000.000) = 29 
    [255000.000, 260000.000) = 104 
    [260000.000, 265000.000) = 15 
    [265000.000, 270000.000) = 5 
    [270000.000, 275000.000) = 0 
    [275000.000, 280000.000) = 1 
    [280000.000, 285000.000) = 0 
    [285000.000, 290000.000) = 0 
    [290000.000, 295000.000) = 1 
    [295000.000, 300000.000) = 0 
    [300000.000, 305000.000) = 0 
    [305000.000, 310000.000) = 0 
    [310000.000, 315000.000) = 0 
    [315000.000, 320000.000) = 0 
    [320000.000, 325000.000) = 1 

  Percentiles, us/op:
      p(0.0000) = 250609.664 us/op
     p(50.0000) = 257163.264 us/op
     p(90.0000) = 261698.355 us/op
     p(95.0000) = 265853.338 us/op
     p(99.0000) = 303982.182 us/op
     p(99.9000) = 321912.832 us/op
     p(99.9900) = 321912.832 us/op
     p(99.9990) = 321912.832 us/op
     p(99.9999) = 321912.832 us/op
    p(100.0000) = 321912.832 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 2, toolName = ejml)

# Run progress: 66.67% complete, ETA 00:51:04
# Fork: 1 of 1
# Warmup Iteration   1: 187496.069 ±(99.9%) 5859.507 us/op
# Warmup Iteration   2: 189683.442 ±(99.9%) 3174.365 us/op
# Warmup Iteration   3: 185792.133 ±(99.9%) 1151.286 us/op
Iteration   1: 184467.606 ±(99.9%) 963.265 us/op
                 mulBenchmark·p0.00:   179568.640 us/op
                 mulBenchmark·p0.50:   184549.376 us/op
                 mulBenchmark·p0.90:   187432.960 us/op
                 mulBenchmark·p0.95:   190054.400 us/op
                 mulBenchmark·p0.99:   194641.920 us/op
                 mulBenchmark·p0.999:  194772.992 us/op
                 mulBenchmark·p0.9999: 194772.992 us/op
                 mulBenchmark·p1.00:   194772.992 us/op

Iteration   2: 185607.661 ±(99.9%) 1246.563 us/op
                 mulBenchmark·p0.00:   179830.784 us/op
                 mulBenchmark·p0.50:   184811.520 us/op
                 mulBenchmark·p0.90:   190106.829 us/op
                 mulBenchmark·p0.95:   192321.946 us/op
                 mulBenchmark·p0.99:   203455.201 us/op
                 mulBenchmark·p0.999:  204210.176 us/op
                 mulBenchmark·p0.9999: 204210.176 us/op
                 mulBenchmark·p1.00:   204210.176 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 217
  mean = 185035.007 ±(99.9%) 784.716 us/op

  Histogram, us/op:
    [170000.000, 172500.000) = 0 
    [172500.000, 175000.000) = 0 
    [175000.000, 177500.000) = 0 
    [177500.000, 180000.000) = 4 
    [180000.000, 182500.000) = 48 
    [182500.000, 185000.000) = 68 
    [185000.000, 187500.000) = 58 
    [187500.000, 190000.000) = 23 
    [190000.000, 192500.000) = 7 
    [192500.000, 195000.000) = 7 
    [195000.000, 197500.000) = 1 
    [197500.000, 200000.000) = 0 
    [200000.000, 202500.000) = 0 
    [202500.000, 205000.000) = 1 
    [205000.000, 207500.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 179568.640 us/op
     p(50.0000) = 184811.520 us/op
     p(90.0000) = 189005.824 us/op
     p(95.0000) = 191653.478 us/op
     p(99.0000) = 195632.824 us/op
     p(99.9000) = 204210.176 us/op
     p(99.9900) = 204210.176 us/op
     p(99.9990) = 204210.176 us/op
     p(99.9999) = 204210.176 us/op
    p(100.0000) = 204210.176 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 2, toolName = la4j)

# Run progress: 67.86% complete, ETA 00:49:14
# Fork: 1 of 1
# Warmup Iteration   1: 779495.266 ±(99.9%) 456454.319 us/op
# Warmup Iteration   2: 619708.416 ±(99.9%) 25190.425 us/op
# Warmup Iteration   3: 615884.198 ±(99.9%) 22538.928 us/op
Iteration   1: 640974.848 ±(99.9%) 45015.432 us/op
                 mulBenchmark·p0.00:   589299.712 us/op
                 mulBenchmark·p0.50:   621281.280 us/op
                 mulBenchmark·p0.90:   708417.946 us/op
                 mulBenchmark·p0.95:   802527.642 us/op
                 mulBenchmark·p0.99:   953155.584 us/op
                 mulBenchmark·p0.999:  953155.584 us/op
                 mulBenchmark·p0.9999: 953155.584 us/op
                 mulBenchmark·p1.00:   953155.584 us/op

Iteration   2: 642318.336 ±(99.9%) 40616.528 us/op
                 mulBenchmark·p0.00:   589299.712 us/op
                 mulBenchmark·p0.50:   606601.216 us/op
                 mulBenchmark·p0.90:   743650.099 us/op
                 mulBenchmark·p0.95:   760899.174 us/op
                 mulBenchmark·p0.99:   773849.088 us/op
                 mulBenchmark·p0.999:  773849.088 us/op
                 mulBenchmark·p0.9999: 773849.088 us/op
                 mulBenchmark·p1.00:   773849.088 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 64
  mean = 641646.592 ±(99.9%) 28571.511 us/op

  Histogram, us/op:
    [ 500000.000,  550000.000) = 0 
    [ 550000.000,  600000.000) = 25 
    [ 600000.000,  650000.000) = 20 
    [ 650000.000,  700000.000) = 6 
    [ 700000.000,  750000.000) = 10 
    [ 750000.000,  800000.000) = 2 
    [ 800000.000,  850000.000) = 0 
    [ 850000.000,  900000.000) = 0 
    [ 900000.000,  950000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 589299.712 us/op
     p(50.0000) = 616562.688 us/op
     p(90.0000) = 728760.320 us/op
     p(95.0000) = 751828.992 us/op
     p(99.0000) = 953155.584 us/op
     p(99.9000) = 953155.584 us/op
     p(99.9900) = 953155.584 us/op
     p(99.9990) = 953155.584 us/op
     p(99.9999) = 953155.584 us/op
    p(100.0000) = 953155.584 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 2, toolName = nd4j)

# Run progress: 69.05% complete, ETA 00:47:25
# Fork: 1 of 1
# Warmup Iteration   1: 7354.583 ±(99.9%) 38.727 us/op
# Warmup Iteration   2: 7294.276 ±(99.9%) 39.343 us/op
# Warmup Iteration   3: 7314.665 ±(99.9%) 63.575 us/op
Iteration   1: 7247.761 ±(99.9%) 29.650 us/op
                 mulBenchmark·p0.00:   6725.632 us/op
                 mulBenchmark·p0.50:   7225.344 us/op
                 mulBenchmark·p0.90:   7430.144 us/op
                 mulBenchmark·p0.95:   7487.488 us/op
                 mulBenchmark·p0.99:   7641.661 us/op
                 mulBenchmark·p0.999:  17029.022 us/op
                 mulBenchmark·p0.9999: 20250.624 us/op
                 mulBenchmark·p1.00:   20250.624 us/op

Iteration   2: 7604.192 ±(99.9%) 901.101 us/op
                 mulBenchmark·p0.00:   6651.904 us/op
                 mulBenchmark·p0.50:   7258.112 us/op
                 mulBenchmark·p0.90:   7536.640 us/op
                 mulBenchmark·p0.95:   7692.288 us/op
                 mulBenchmark·p0.99:   9460.122 us/op
                 mulBenchmark·p0.999:  21000.028 us/op
                 mulBenchmark·p0.9999: 725614.592 us/op
                 mulBenchmark·p1.00:   725614.592 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 5387
  mean =   7421.709 ±(99.9%) 439.799 us/op

  Histogram, us/op:
    [     0.000,  50000.000) = 5386 
    [ 50000.000, 100000.000) = 0 
    [100000.000, 150000.000) = 0 
    [150000.000, 200000.000) = 0 
    [200000.000, 250000.000) = 0 
    [250000.000, 300000.000) = 0 
    [300000.000, 350000.000) = 0 
    [350000.000, 400000.000) = 0 
    [400000.000, 450000.000) = 0 
    [450000.000, 500000.000) = 0 
    [500000.000, 550000.000) = 0 
    [550000.000, 600000.000) = 0 
    [600000.000, 650000.000) = 0 
    [650000.000, 700000.000) = 0 
    [700000.000, 750000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   6651.904 us/op
     p(50.0000) =   7241.728 us/op
     p(90.0000) =   7479.296 us/op
     p(95.0000) =   7569.408 us/op
     p(99.0000) =   8349.942 us/op
     p(99.9000) =  19386.466 us/op
     p(99.9900) = 725614.592 us/op
     p(99.9990) = 725614.592 us/op
     p(99.9999) = 725614.592 us/op
    p(100.0000) = 725614.592 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 2, toolName = jBlas)

# Run progress: 70.24% complete, ETA 00:45:35
# Fork: 1 of 1
# Warmup Iteration   1: 12625.943 ±(99.9%) 573.208 us/op
# Warmup Iteration   2: 12373.570 ±(99.9%) 199.128 us/op
# Warmup Iteration   3: 12120.482 ±(99.9%) 214.667 us/op
Iteration   1: 12273.065 ±(99.9%) 172.681 us/op
                 mulBenchmark·p0.00:   9404.416 us/op
                 mulBenchmark·p0.50:   11739.136 us/op
                 mulBenchmark·p0.90:   14974.976 us/op
                 mulBenchmark·p0.95:   15773.696 us/op
                 mulBenchmark·p0.99:   20283.392 us/op
                 mulBenchmark·p0.999:  24872.583 us/op
                 mulBenchmark·p0.9999: 26542.080 us/op
                 mulBenchmark·p1.00:   26542.080 us/op

Iteration   2: 12727.310 ±(99.9%) 129.543 us/op
                 mulBenchmark·p0.00:   9601.024 us/op
                 mulBenchmark·p0.50:   12845.056 us/op
                 mulBenchmark·p0.90:   15137.178 us/op
                 mulBenchmark·p0.95:   15286.272 us/op
                 mulBenchmark·p0.99:   16120.709 us/op
                 mulBenchmark·p0.999:  22455.976 us/op
                 mulBenchmark·p0.9999: 23166.976 us/op
                 mulBenchmark·p1.00:   23166.976 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 3198
  mean =  12496.069 ±(99.9%) 109.187 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 0 
    [ 2500.000,  5000.000) = 0 
    [ 5000.000,  7500.000) = 0 
    [ 7500.000, 10000.000) = 78 
    [10000.000, 12500.000) = 1744 
    [12500.000, 15000.000) = 1007 
    [15000.000, 17500.000) = 319 
    [17500.000, 20000.000) = 28 
    [20000.000, 22500.000) = 16 
    [22500.000, 25000.000) = 5 
    [25000.000, 27500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   9404.416 us/op
     p(50.0000) =  11976.704 us/op
     p(90.0000) =  15106.048 us/op
     p(95.0000) =  15351.808 us/op
     p(99.0000) =  18350.080 us/op
     p(99.9000) =  23592.960 us/op
     p(99.9900) =  26542.080 us/op
     p(99.9990) =  26542.080 us/op
     p(99.9999) =  26542.080 us/op
    p(100.0000) =  26542.080 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 3, toolName = commonMath3)

# Run progress: 71.43% complete, ETA 00:43:45
# Fork: 1 of 1
# Warmup Iteration   1: 227523.119 ±(99.9%) 20297.974 us/op
# Warmup Iteration   2: 237642.681 ±(99.9%) 21477.827 us/op
# Warmup Iteration   3: 230150.516 ±(99.9%) 23129.844 us/op
Iteration   1: 230195.577 ±(99.9%) 15959.815 us/op
                 mulBenchmark·p0.00:   139198.464 us/op
                 mulBenchmark·p0.50:   232259.584 us/op
                 mulBenchmark·p0.90:   281647.514 us/op
                 mulBenchmark·p0.95:   302933.606 us/op
                 mulBenchmark·p0.99:   343408.640 us/op
                 mulBenchmark·p0.999:  343408.640 us/op
                 mulBenchmark·p0.9999: 343408.640 us/op
                 mulBenchmark·p1.00:   343408.640 us/op

Iteration   2: 225879.765 ±(99.9%) 14911.366 us/op
                 mulBenchmark·p0.00:   139460.608 us/op
                 mulBenchmark·p0.50:   223870.976 us/op
                 mulBenchmark·p0.90:   274726.912 us/op
                 mulBenchmark·p0.95:   281018.368 us/op
                 mulBenchmark·p0.99:   341835.776 us/op
                 mulBenchmark·p0.999:  341835.776 us/op
                 mulBenchmark·p0.9999: 341835.776 us/op
                 mulBenchmark·p1.00:   341835.776 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 176
  mean = 228013.149 ±(99.9%) 10707.390 us/op

  Histogram, us/op:
    [100000.000, 125000.000) = 0 
    [125000.000, 150000.000) = 6 
    [150000.000, 175000.000) = 18 
    [175000.000, 200000.000) = 20 
    [200000.000, 225000.000) = 42 
    [225000.000, 250000.000) = 34 
    [250000.000, 275000.000) = 36 
    [275000.000, 300000.000) = 13 
    [300000.000, 325000.000) = 5 
    [325000.000, 350000.000) = 2 
    [350000.000, 375000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 139198.464 us/op
     p(50.0000) = 229507.072 us/op
     p(90.0000) = 278554.214 us/op
     p(95.0000) = 292107.059 us/op
     p(99.0000) = 342197.535 us/op
     p(99.9000) = 343408.640 us/op
     p(99.9900) = 343408.640 us/op
     p(99.9990) = 343408.640 us/op
     p(99.9999) = 343408.640 us/op
    p(100.0000) = 343408.640 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 3, toolName = colt)

# Run progress: 72.62% complete, ETA 00:41:55
# Fork: 1 of 1
# Warmup Iteration   1: 60508.283 ±(99.9%) 1121.907 us/op
# Warmup Iteration   2: 60390.240 ±(99.9%) 517.765 us/op
# Warmup Iteration   3: 59919.133 ±(99.9%) 174.303 us/op
Iteration   1: 59983.884 ±(99.9%) 205.207 us/op
                 mulBenchmark·p0.00:   59244.544 us/op
                 mulBenchmark·p0.50:   59768.832 us/op
                 mulBenchmark·p0.90:   60325.888 us/op
                 mulBenchmark·p0.95:   60653.568 us/op
                 mulBenchmark·p0.99:   65968.538 us/op
                 mulBenchmark·p0.999:  73531.392 us/op
                 mulBenchmark·p0.9999: 73531.392 us/op
                 mulBenchmark·p1.00:   73531.392 us/op

Iteration   2: 60019.595 ±(99.9%) 301.941 us/op
                 mulBenchmark·p0.00:   58851.328 us/op
                 mulBenchmark·p0.50:   59703.296 us/op
                 mulBenchmark·p0.90:   60817.408 us/op
                 mulBenchmark·p0.95:   61554.688 us/op
                 mulBenchmark·p0.99:   70090.752 us/op
                 mulBenchmark·p0.999:  77856.768 us/op
                 mulBenchmark·p0.9999: 77856.768 us/op
                 mulBenchmark·p1.00:   77856.768 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 668
  mean =  60001.740 ±(99.9%) 181.600 us/op

  Histogram, us/op:
    [50000.000, 52500.000) = 0 
    [52500.000, 55000.000) = 0 
    [55000.000, 57500.000) = 0 
    [57500.000, 60000.000) = 473 
    [60000.000, 62500.000) = 180 
    [62500.000, 65000.000) = 8 
    [65000.000, 67500.000) = 2 
    [67500.000, 70000.000) = 1 
    [70000.000, 72500.000) = 1 
    [72500.000, 75000.000) = 1 
    [75000.000, 77500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =  58851.328 us/op
     p(50.0000) =  59768.832 us/op
     p(90.0000) =  60620.800 us/op
     p(95.0000) =  61443.277 us/op
     p(99.0000) =  66701.885 us/op
     p(99.9000) =  77856.768 us/op
     p(99.9900) =  77856.768 us/op
     p(99.9990) =  77856.768 us/op
     p(99.9999) =  77856.768 us/op
    p(100.0000) =  77856.768 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 3, toolName = ejml)

# Run progress: 73.81% complete, ETA 00:40:05
# Fork: 1 of 1
# Warmup Iteration   1: 44538.266 ±(99.9%) 883.890 us/op
# Warmup Iteration   2: 44757.577 ±(99.9%) 454.287 us/op
# Warmup Iteration   3: 44732.416 ±(99.9%) 437.794 us/op
Iteration   1: 43769.013 ±(99.9%) 225.190 us/op
                 mulBenchmark·p0.00:   42860.544 us/op
                 mulBenchmark·p0.50:   43450.368 us/op
                 mulBenchmark·p0.90:   44367.872 us/op
                 mulBenchmark·p0.95:   44761.088 us/op
                 mulBenchmark·p0.99:   49263.411 us/op
                 mulBenchmark·p0.999:  61669.376 us/op
                 mulBenchmark·p0.9999: 61669.376 us/op
                 mulBenchmark·p1.00:   61669.376 us/op

Iteration   2: 43836.254 ±(99.9%) 1390.100 us/op
                 mulBenchmark·p0.00:   42598.400 us/op
                 mulBenchmark·p0.50:   43319.296 us/op
                 mulBenchmark·p0.90:   43778.048 us/op
                 mulBenchmark·p0.95:   43909.120 us/op
                 mulBenchmark·p0.99:   47204.925 us/op
                 mulBenchmark·p0.999:  234356.736 us/op
                 mulBenchmark·p0.9999: 234356.736 us/op
                 mulBenchmark·p1.00:   234356.736 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 913
  mean =  43802.597 ±(99.9%) 700.708 us/op

  Histogram, us/op:
    [     0.000,  25000.000) = 0 
    [ 25000.000,  50000.000) = 907 
    [ 50000.000,  75000.000) = 5 
    [ 75000.000, 100000.000) = 0 
    [100000.000, 125000.000) = 0 
    [125000.000, 150000.000) = 0 
    [150000.000, 175000.000) = 0 
    [175000.000, 200000.000) = 0 
    [200000.000, 225000.000) = 0 
    [225000.000, 250000.000) = 1 
    [250000.000, 275000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  42598.400 us/op
     p(50.0000) =  43384.832 us/op
     p(90.0000) =  44171.264 us/op
     p(95.0000) =  44630.016 us/op
     p(99.0000) =  47495.250 us/op
     p(99.9000) = 234356.736 us/op
     p(99.9900) = 234356.736 us/op
     p(99.9990) = 234356.736 us/op
     p(99.9999) = 234356.736 us/op
    p(100.0000) = 234356.736 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 3, toolName = la4j)

# Run progress: 75.00% complete, ETA 00:38:16
# Fork: 1 of 1
# Warmup Iteration   1: 209474.901 ±(99.9%) 39791.103 us/op
# Warmup Iteration   2: 149598.147 ±(99.9%) 2531.151 us/op
# Warmup Iteration   3: 167719.731 ±(99.9%) 14339.769 us/op
Iteration   1: 150817.553 ±(99.9%) 3039.061 us/op
                 mulBenchmark·p0.00:   145227.776 us/op
                 mulBenchmark·p0.50:   146538.496 us/op
                 mulBenchmark·p0.90:   163001.139 us/op
                 mulBenchmark·p0.95:   178362.778 us/op
                 mulBenchmark·p0.99:   204723.978 us/op
                 mulBenchmark·p0.999:  209715.200 us/op
                 mulBenchmark·p0.9999: 209715.200 us/op
                 mulBenchmark·p1.00:   209715.200 us/op

Iteration   2: 158932.082 ±(99.9%) 7935.781 us/op
                 mulBenchmark·p0.00:   145227.776 us/op
                 mulBenchmark·p0.50:   147062.784 us/op
                 mulBenchmark·p0.90:   195795.354 us/op
                 mulBenchmark·p0.95:   225902.592 us/op
                 mulBenchmark·p0.99:   292363.960 us/op
                 mulBenchmark·p0.999:  301989.888 us/op
                 mulBenchmark·p0.9999: 301989.888 us/op
                 mulBenchmark·p1.00:   301989.888 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 259
  mean = 154765.162 ±(99.9%) 4190.541 us/op

  Histogram, us/op:
    [100000.000, 125000.000) = 0 
    [125000.000, 150000.000) = 188 
    [150000.000, 175000.000) = 44 
    [175000.000, 200000.000) = 14 
    [200000.000, 225000.000) = 7 
    [225000.000, 250000.000) = 4 
    [250000.000, 275000.000) = 1 
    [275000.000, 300000.000) = 0 
    [300000.000, 325000.000) = 1 
    [325000.000, 350000.000) = 0 
    [350000.000, 375000.000) = 0 

  Percentiles, us/op:
      p(0.0000) = 145227.776 us/op
     p(50.0000) = 146800.640 us/op
     p(90.0000) = 177733.632 us/op
     p(95.0000) = 200015.872 us/op
     p(99.0000) = 244475.494 us/op
     p(99.9000) = 301989.888 us/op
     p(99.9900) = 301989.888 us/op
     p(99.9990) = 301989.888 us/op
     p(99.9999) = 301989.888 us/op
    p(100.0000) = 301989.888 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 3, toolName = nd4j)

# Run progress: 76.19% complete, ETA 00:36:26
# Fork: 1 of 1
# Warmup Iteration   1: 1904.877 ±(99.9%) 10.536 us/op
# Warmup Iteration   2: 1864.639 ±(99.9%) 4.728 us/op
# Warmup Iteration   3: 1875.422 ±(99.9%) 16.233 us/op
Iteration   1: 1874.857 ±(99.9%) 9.578 us/op
                 mulBenchmark·p0.00:   1656.832 us/op
                 mulBenchmark·p0.50:   1861.632 us/op
                 mulBenchmark·p0.90:   1953.792 us/op
                 mulBenchmark·p0.95:   1980.416 us/op
                 mulBenchmark·p0.99:   2046.812 us/op
                 mulBenchmark·p0.999:  4832.575 us/op
                 mulBenchmark·p0.9999: 19897.044 us/op
                 mulBenchmark·p1.00:   20086.784 us/op

Iteration   2: 2082.607 ±(99.9%) 684.207 us/op
                 mulBenchmark·p0.00:   1675.264 us/op
                 mulBenchmark·p0.50:   1863.680 us/op
                 mulBenchmark·p0.90:   1954.406 us/op
                 mulBenchmark·p0.95:   1982.464 us/op
                 mulBenchmark·p0.99:   2056.253 us/op
                 mulBenchmark·p0.999:  4791.714 us/op
                 mulBenchmark·p0.9999: 1996488.704 us/op
                 mulBenchmark·p1.00:   1996488.704 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 20253
  mean =   1973.290 ±(99.9%) 324.168 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 20252 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1656.832 us/op
     p(50.0000) =   1861.632 us/op
     p(90.0000) =   1953.792 us/op
     p(95.0000) =   1980.416 us/op
     p(99.0000) =   2050.048 us/op
     p(99.9000) =   4650.975 us/op
     p(99.9900) =  20013.541 us/op
     p(99.9990) = 1996488.704 us/op
     p(99.9999) = 1996488.704 us/op
    p(100.0000) = 1996488.704 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 3, toolName = jBlas)

# Run progress: 77.38% complete, ETA 00:34:36
# Fork: 1 of 1
# Warmup Iteration   1: 2103.520 ±(99.9%) 104.255 us/op
# Warmup Iteration   2: 1831.008 ±(99.9%) 23.699 us/op
# Warmup Iteration   3: 1828.524 ±(99.9%) 25.608 us/op
Iteration   1: 1862.130 ±(99.9%) 23.854 us/op
                 mulBenchmark·p0.00:   1628.160 us/op
                 mulBenchmark·p0.50:   1724.416 us/op
                 mulBenchmark·p0.90:   2033.664 us/op
                 mulBenchmark·p0.95:   2056.192 us/op
                 mulBenchmark·p0.99:   3338.240 us/op
                 mulBenchmark·p0.999:  7440.540 us/op
                 mulBenchmark·p0.9999: 46145.772 us/op
                 mulBenchmark·p1.00:   46596.096 us/op

Iteration   2: 1856.262 ±(99.9%) 14.267 us/op
                 mulBenchmark·p0.00:   1634.304 us/op
                 mulBenchmark·p0.50:   1808.384 us/op
                 mulBenchmark·p0.90:   2074.624 us/op
                 mulBenchmark·p0.95:   2166.784 us/op
                 mulBenchmark·p0.99:   2662.400 us/op
                 mulBenchmark·p0.999:  7653.343 us/op
                 mulBenchmark·p0.9999: 19945.672 us/op
                 mulBenchmark·p1.00:   19955.712 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 21495
  mean =   1859.191 ±(99.9%) 13.885 us/op

  Histogram, us/op:
    [    0.000,  5000.000) = 21445 
    [ 5000.000, 10000.000) = 34 
    [10000.000, 15000.000) = 9 
    [15000.000, 20000.000) = 4 
    [20000.000, 25000.000) = 0 
    [25000.000, 30000.000) = 1 
    [30000.000, 35000.000) = 0 
    [35000.000, 40000.000) = 0 
    [40000.000, 45000.000) = 1 

  Percentiles, us/op:
      p(0.0000) =   1628.160 us/op
     p(50.0000) =   1742.848 us/op
     p(90.0000) =   2037.760 us/op
     p(95.0000) =   2158.592 us/op
     p(99.0000) =   3105.096 us/op
     p(99.9000) =   7413.957 us/op
     p(99.9900) =  38631.742 us/op
     p(99.9990) =  46596.096 us/op
     p(99.9999) =  46596.096 us/op
    p(100.0000) =  46596.096 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 4, toolName = commonMath3)

# Run progress: 78.57% complete, ETA 00:32:46
# Fork: 1 of 1
# Warmup Iteration   1: 24740.327 ±(99.9%) 361.175 us/op
# Warmup Iteration   2: 24627.735 ±(99.9%) 299.407 us/op
# Warmup Iteration   3: 24523.395 ±(99.9%) 275.173 us/op
Iteration   1: 24387.065 ±(99.9%) 185.186 us/op
                 mulBenchmark·p0.00:   22904.832 us/op
                 mulBenchmark·p0.50:   24018.944 us/op
                 mulBenchmark·p0.90:   25493.504 us/op
                 mulBenchmark·p0.95:   27130.266 us/op
                 mulBenchmark·p0.99:   29146.481 us/op
                 mulBenchmark·p0.999:  44892.160 us/op
                 mulBenchmark·p0.9999: 44892.160 us/op
                 mulBenchmark·p1.00:   44892.160 us/op

Iteration   2: 24336.100 ±(99.9%) 156.020 us/op
                 mulBenchmark·p0.00:   22970.368 us/op
                 mulBenchmark·p0.50:   23986.176 us/op
                 mulBenchmark·p0.90:   25690.112 us/op
                 mulBenchmark·p0.95:   27033.600 us/op
                 mulBenchmark·p0.99:   28664.463 us/op
                 mulBenchmark·p0.999:  44236.800 us/op
                 mulBenchmark·p0.9999: 44236.800 us/op
                 mulBenchmark·p1.00:   44236.800 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 1642
  mean =  24361.551 ±(99.9%) 120.812 us/op

  Histogram, us/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 1391 
    [25000.000, 27500.000) = 180 
    [27500.000, 30000.000) = 63 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 4 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 2 
    [45000.000, 47500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  22904.832 us/op
     p(50.0000) =  23986.176 us/op
     p(90.0000) =  25614.746 us/op
     p(95.0000) =  27066.368 us/op
     p(99.0000) =  28737.536 us/op
     p(99.9000) =  44470.764 us/op
     p(99.9900) =  44892.160 us/op
     p(99.9990) =  44892.160 us/op
     p(99.9999) =  44892.160 us/op
    p(100.0000) =  44892.160 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 4, toolName = colt)

# Run progress: 79.76% complete, ETA 00:30:57
# Fork: 1 of 1
# Warmup Iteration   1: 17725.280 ±(99.9%) 249.848 us/op
# Warmup Iteration   2: 17720.109 ±(99.9%) 133.557 us/op
# Warmup Iteration   3: 17597.281 ±(99.9%) 153.793 us/op
Iteration   1: 17550.673 ±(99.9%) 329.193 us/op
                 mulBenchmark·p0.00:   17006.592 us/op
                 mulBenchmark·p0.50:   17432.576 us/op
                 mulBenchmark·p0.90:   17530.880 us/op
                 mulBenchmark·p0.95:   17563.648 us/op
                 mulBenchmark·p0.99:   19582.157 us/op
                 mulBenchmark·p0.999:  115105.464 us/op
                 mulBenchmark·p0.9999: 128450.560 us/op
                 mulBenchmark·p1.00:   128450.560 us/op

Iteration   2: 17310.242 ±(99.9%) 29.701 us/op
                 mulBenchmark·p0.00:   17006.592 us/op
                 mulBenchmark·p0.50:   17235.968 us/op
                 mulBenchmark·p0.90:   17629.184 us/op
                 mulBenchmark·p0.95:   17924.096 us/op
                 mulBenchmark·p0.99:   18495.570 us/op
                 mulBenchmark·p0.999:  20815.151 us/op
                 mulBenchmark·p0.9999: 21004.288 us/op
                 mulBenchmark·p1.00:   21004.288 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 2294
  mean =  17429.619 ±(99.9%) 164.088 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 0 
    [ 12500.000,  25000.000) = 2291 
    [ 25000.000,  37500.000) = 2 
    [ 37500.000,  50000.000) = 0 
    [ 50000.000,  62500.000) = 0 
    [ 62500.000,  75000.000) = 0 
    [ 75000.000,  87500.000) = 0 
    [ 87500.000, 100000.000) = 0 
    [100000.000, 112500.000) = 0 
    [112500.000, 125000.000) = 0 
    [125000.000, 137500.000) = 1 
    [137500.000, 150000.000) = 0 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  17006.592 us/op
     p(50.0000) =  17334.272 us/op
     p(90.0000) =  17530.880 us/op
     p(95.0000) =  17833.984 us/op
     p(99.0000) =  18841.600 us/op
     p(99.9000) =  32190.792 us/op
     p(99.9900) = 128450.560 us/op
     p(99.9990) = 128450.560 us/op
     p(99.9999) = 128450.560 us/op
    p(100.0000) = 128450.560 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 4, toolName = ejml)

# Run progress: 80.95% complete, ETA 00:29:07
# Fork: 1 of 1
# Warmup Iteration   1: 12591.125 ±(99.9%) 101.301 us/op
# Warmup Iteration   2: 12615.432 ±(99.9%) 62.191 us/op
# Warmup Iteration   3: 12643.995 ±(99.9%) 116.119 us/op
Iteration   1: 12568.989 ±(99.9%) 208.652 us/op
                 mulBenchmark·p0.00:   12058.624 us/op
                 mulBenchmark·p0.50:   12484.608 us/op
                 mulBenchmark·p0.90:   12599.296 us/op
                 mulBenchmark·p0.95:   12648.448 us/op
                 mulBenchmark·p0.99:   15534.653 us/op
                 mulBenchmark·p0.999:  62455.808 us/op
                 mulBenchmark·p0.9999: 108527.616 us/op
                 mulBenchmark·p1.00:   108527.616 us/op

Iteration   2: 12371.116 ±(99.9%) 18.323 us/op
                 mulBenchmark·p0.00:   12058.624 us/op
                 mulBenchmark·p0.50:   12320.768 us/op
                 mulBenchmark·p0.90:   12533.760 us/op
                 mulBenchmark·p0.95:   12861.440 us/op
                 mulBenchmark·p0.99:   13090.816 us/op
                 mulBenchmark·p0.999:  14754.316 us/op
                 mulBenchmark·p0.9999: 14794.752 us/op
                 mulBenchmark·p1.00:   14794.752 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 3207
  mean =  12469.282 ±(99.9%) 103.969 us/op

  Histogram, us/op:
    [ 10000.000,  20000.000) = 3204 
    [ 20000.000,  30000.000) = 1 
    [ 30000.000,  40000.000) = 1 
    [ 40000.000,  50000.000) = 0 
    [ 50000.000,  60000.000) = 0 
    [ 60000.000,  70000.000) = 0 
    [ 70000.000,  80000.000) = 0 
    [ 80000.000,  90000.000) = 0 
    [ 90000.000, 100000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  12058.624 us/op
     p(50.0000) =  12353.536 us/op
     p(90.0000) =  12599.296 us/op
     p(95.0000) =  12697.600 us/op
     p(99.0000) =  14761.984 us/op
     p(99.9000) =  25113.657 us/op
     p(99.9900) = 108527.616 us/op
     p(99.9990) = 108527.616 us/op
     p(99.9999) = 108527.616 us/op
    p(100.0000) = 108527.616 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 4, toolName = la4j)

# Run progress: 82.14% complete, ETA 00:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 54050.550 ±(99.9%) 3742.944 us/op
# Warmup Iteration   2: 47792.596 ±(99.9%) 827.128 us/op
# Warmup Iteration   3: 47758.892 ±(99.9%) 784.899 us/op
Iteration   1: 47651.070 ±(99.9%) 542.565 us/op
                 mulBenchmark·p0.00:   46137.344 us/op
                 mulBenchmark·p0.50:   46661.632 us/op
                 mulBenchmark·p0.90:   50003.968 us/op
                 mulBenchmark·p0.95:   53736.243 us/op
                 mulBenchmark·p0.99:   67681.649 us/op
                 mulBenchmark·p0.999:  71434.240 us/op
                 mulBenchmark·p0.9999: 71434.240 us/op
                 mulBenchmark·p1.00:   71434.240 us/op

Iteration   2: 55637.333 ±(99.9%) 1205.883 us/op
                 mulBenchmark·p0.00:   46268.416 us/op
                 mulBenchmark·p0.50:   58589.184 us/op
                 mulBenchmark·p0.90:   62888.346 us/op
                 mulBenchmark·p0.95:   66378.138 us/op
                 mulBenchmark·p0.99:   71616.430 us/op
                 mulBenchmark·p0.999:  79036.416 us/op
                 mulBenchmark·p0.9999: 79036.416 us/op
                 mulBenchmark·p1.00:   79036.416 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 780
  mean =  51337.037 ±(99.9%) 783.100 us/op

  Histogram, us/op:
    [40000.000, 42500.000) = 0 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 466 
    [47500.000, 50000.000) = 28 
    [50000.000, 52500.000) = 17 
    [52500.000, 55000.000) = 21 
    [55000.000, 57500.000) = 8 
    [57500.000, 60000.000) = 180 
    [60000.000, 62500.000) = 16 
    [62500.000, 65000.000) = 13 
    [65000.000, 67500.000) = 14 
    [67500.000, 70000.000) = 7 
    [70000.000, 72500.000) = 8 
    [72500.000, 75000.000) = 1 
    [75000.000, 77500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =  46137.344 us/op
     p(50.0000) =  46858.240 us/op
     p(90.0000) =  59113.472 us/op
     p(95.0000) =  63671.501 us/op
     p(99.0000) =  70541.640 us/op
     p(99.9000) =  79036.416 us/op
     p(99.9900) =  79036.416 us/op
     p(99.9990) =  79036.416 us/op
     p(99.9999) =  79036.416 us/op
    p(100.0000) =  79036.416 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 4, toolName = nd4j)

# Run progress: 83.33% complete, ETA 00:25:28
# Fork: 1 of 1
# Warmup Iteration   1: 986.891 ±(99.9%) 4.785 us/op
# Warmup Iteration   2: 981.153 ±(99.9%) 12.925 us/op
# Warmup Iteration   3: 985.196 ±(99.9%) 12.812 us/op
Iteration   1: 978.342 ±(99.9%) 7.506 us/op
                 mulBenchmark·p0.00:   855.040 us/op
                 mulBenchmark·p0.50:   963.584 us/op
                 mulBenchmark·p0.90:   1022.976 us/op
                 mulBenchmark·p0.95:   1040.384 us/op
                 mulBenchmark·p0.99:   1083.392 us/op
                 mulBenchmark·p0.999:  6647.349 us/op
                 mulBenchmark·p0.9999: 16897.068 us/op
                 mulBenchmark·p1.00:   19496.960 us/op

Iteration   2: 1068.999 ±(99.9%) 330.624 us/op
                 mulBenchmark·p0.00:   800.768 us/op
                 mulBenchmark·p0.50:   962.560 us/op
                 mulBenchmark·p0.90:   1019.904 us/op
                 mulBenchmark·p0.95:   1038.336 us/op
                 mulBenchmark·p0.99:   1089.536 us/op
                 mulBenchmark·p0.999:  2517.053 us/op
                 mulBenchmark·p0.9999: 259131.892 us/op
                 mulBenchmark·p1.00:   1879048.192 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 39123
  mean =   1021.665 ±(99.9%) 158.033 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 39122 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    800.768 us/op
     p(50.0000) =    963.584 us/op
     p(90.0000) =   1020.928 us/op
     p(95.0000) =   1039.360 us/op
     p(99.0000) =   1085.440 us/op
     p(99.9000) =   3885.171 us/op
     p(99.9900) =  16669.108 us/op
     p(99.9990) = 1879048.192 us/op
     p(99.9999) = 1879048.192 us/op
    p(100.0000) = 1879048.192 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 4, toolName = jBlas)

# Run progress: 84.52% complete, ETA 00:23:39
# Fork: 1 of 1
# Warmup Iteration   1: 935.390 ±(99.9%) 57.794 us/op
# Warmup Iteration   2: 858.924 ±(99.9%) 19.358 us/op
# Warmup Iteration   3: 801.367 ±(99.9%) 14.182 us/op
Iteration   1: 774.006 ±(99.9%) 6.518 us/op
                 mulBenchmark·p0.00:   703.488 us/op
                 mulBenchmark·p0.50:   741.376 us/op
                 mulBenchmark·p0.90:   817.152 us/op
                 mulBenchmark·p0.95:   914.432 us/op
                 mulBenchmark·p0.99:   959.488 us/op
                 mulBenchmark·p0.999:  3670.872 us/op
                 mulBenchmark·p0.9999: 17248.384 us/op
                 mulBenchmark·p1.00:   24576.000 us/op

Iteration   2: 756.954 ±(99.9%) 7.666 us/op
                 mulBenchmark·p0.00:   703.488 us/op
                 mulBenchmark·p0.50:   738.304 us/op
                 mulBenchmark·p0.90:   768.000 us/op
                 mulBenchmark·p0.95:   781.312 us/op
                 mulBenchmark·p0.99:   940.032 us/op
                 mulBenchmark·p0.999:  3305.472 us/op
                 mulBenchmark·p0.9999: 19901.972 us/op
                 mulBenchmark·p1.00:   47382.528 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 52215
  mean =    765.385 ±(99.9%) 5.042 us/op

  Histogram, us/op:
    [    0.000,  5000.000) = 52188 
    [ 5000.000, 10000.000) = 11 
    [10000.000, 15000.000) = 11 
    [15000.000, 20000.000) = 1 
    [20000.000, 25000.000) = 2 
    [25000.000, 30000.000) = 1 
    [30000.000, 35000.000) = 0 
    [35000.000, 40000.000) = 0 
    [40000.000, 45000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    703.488 us/op
     p(50.0000) =    739.328 us/op
     p(90.0000) =    777.216 us/op
     p(95.0000) =    903.373 us/op
     p(99.0000) =    953.344 us/op
     p(99.9000) =   3489.464 us/op
     p(99.9900) =  16149.565 us/op
     p(99.9990) =  47382.528 us/op
     p(99.9999) =  47382.528 us/op
    p(100.0000) =  47382.528 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 5, toolName = commonMath3)

# Run progress: 85.71% complete, ETA 00:21:49
# Fork: 1 of 1
# Warmup Iteration   1: 12294.731 ±(99.9%) 164.578 us/op
# Warmup Iteration   2: 12375.638 ±(99.9%) 90.232 us/op
# Warmup Iteration   3: 12455.064 ±(99.9%) 104.320 us/op
Iteration   1: 12231.909 ±(99.9%) 72.613 us/op
                 mulBenchmark·p0.00:   9306.112 us/op
                 mulBenchmark·p0.50:   12140.544 us/op
                 mulBenchmark·p0.90:   12713.984 us/op
                 mulBenchmark·p0.95:   13008.896 us/op
                 mulBenchmark·p0.99:   14067.302 us/op
                 mulBenchmark·p0.999:  29669.949 us/op
                 mulBenchmark·p0.9999: 31064.064 us/op
                 mulBenchmark·p1.00:   31064.064 us/op

Iteration   2: 12106.278 ±(99.9%) 60.619 us/op
                 mulBenchmark·p0.00:   9289.728 us/op
                 mulBenchmark·p0.50:   12058.624 us/op
                 mulBenchmark·p0.90:   12566.528 us/op
                 mulBenchmark·p0.95:   12697.600 us/op
                 mulBenchmark·p0.99:   13639.352 us/op
                 mulBenchmark·p0.999:  25343.951 us/op
                 mulBenchmark·p0.9999: 30834.688 us/op
                 mulBenchmark·p1.00:   30834.688 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 3285
  mean =  12168.768 ±(99.9%) 47.340 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 0 
    [ 2500.000,  5000.000) = 0 
    [ 5000.000,  7500.000) = 0 
    [ 7500.000, 10000.000) = 27 
    [10000.000, 12500.000) = 2663 
    [12500.000, 15000.000) = 579 
    [15000.000, 17500.000) = 7 
    [17500.000, 20000.000) = 4 
    [20000.000, 22500.000) = 2 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 2 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   9289.728 us/op
     p(50.0000) =  12091.392 us/op
     p(90.0000) =  12632.064 us/op
     p(95.0000) =  12840.141 us/op
     p(99.0000) =  13893.632 us/op
     p(99.9000) =  27022.393 us/op
     p(99.9900) =  31064.064 us/op
     p(99.9990) =  31064.064 us/op
     p(99.9999) =  31064.064 us/op
    p(100.0000) =  31064.064 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 5, toolName = colt)

# Run progress: 86.90% complete, ETA 00:20:00
# Fork: 1 of 1
# Warmup Iteration   1: 9089.933 ±(99.9%) 148.472 us/op
# Warmup Iteration   2: 9230.062 ±(99.9%) 62.026 us/op
# Warmup Iteration   3: 9141.762 ±(99.9%) 64.330 us/op
Iteration   1: 9202.316 ±(99.9%) 138.376 us/op
                 mulBenchmark·p0.00:   8880.128 us/op
                 mulBenchmark·p0.50:   9125.888 us/op
                 mulBenchmark·p0.90:   9207.808 us/op
                 mulBenchmark·p0.95:   9273.344 us/op
                 mulBenchmark·p0.99:   9748.480 us/op
                 mulBenchmark·p0.999:  27080.458 us/op
                 mulBenchmark·p0.9999: 96075.776 us/op
                 mulBenchmark·p1.00:   96075.776 us/op

Iteration   2: 9060.768 ±(99.9%) 14.790 us/op
                 mulBenchmark·p0.00:   8863.744 us/op
                 mulBenchmark·p0.50:   8962.048 us/op
                 mulBenchmark·p0.90:   9355.264 us/op
                 mulBenchmark·p0.95:   9371.648 us/op
                 mulBenchmark·p0.99:   9485.189 us/op
                 mulBenchmark·p0.999:  10967.106 us/op
                 mulBenchmark·p0.9999: 11255.808 us/op
                 mulBenchmark·p1.00:   11255.808 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 4378
  mean =   9130.993 ±(99.9%) 69.088 us/op

  Histogram, us/op:
    [     0.000,  10000.000) = 4351 
    [ 10000.000,  20000.000) = 24 
    [ 20000.000,  30000.000) = 2 
    [ 30000.000,  40000.000) = 0 
    [ 40000.000,  50000.000) = 0 
    [ 50000.000,  60000.000) = 0 
    [ 60000.000,  70000.000) = 0 
    [ 70000.000,  80000.000) = 0 
    [ 80000.000,  90000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   8863.744 us/op
     p(50.0000) =   9093.120 us/op
     p(90.0000) =   9338.880 us/op
     p(95.0000) =   9371.648 us/op
     p(99.0000) =   9682.944 us/op
     p(99.9000) =  17066.426 us/op
     p(99.9900) =  96075.776 us/op
     p(99.9990) =  96075.776 us/op
     p(99.9999) =  96075.776 us/op
    p(100.0000) =  96075.776 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 5, toolName = ejml)

# Run progress: 88.10% complete, ETA 00:18:11
# Fork: 1 of 1
# Warmup Iteration   1: 6501.549 ±(99.9%) 80.292 us/op
# Warmup Iteration   2: 6585.429 ±(99.9%) 85.217 us/op
# Warmup Iteration   3: 6436.401 ±(99.9%) 56.846 us/op
Iteration   1: 6426.147 ±(99.9%) 134.109 us/op
                 mulBenchmark·p0.00:   5996.544 us/op
                 mulBenchmark·p0.50:   6242.304 us/op
                 mulBenchmark·p0.90:   6815.744 us/op
                 mulBenchmark·p0.95:   6938.624 us/op
                 mulBenchmark·p0.99:   7732.347 us/op
                 mulBenchmark·p0.999:  19332.186 us/op
                 mulBenchmark·p0.9999: 129761.280 us/op
                 mulBenchmark·p1.00:   129761.280 us/op

Iteration   2: 6397.351 ±(99.9%) 34.825 us/op
                 mulBenchmark·p0.00:   6078.464 us/op
                 mulBenchmark·p0.50:   6176.768 us/op
                 mulBenchmark·p0.90:   6881.280 us/op
                 mulBenchmark·p0.95:   6930.432 us/op
                 mulBenchmark·p0.99:   6995.968 us/op
                 mulBenchmark·p0.999:  17477.632 us/op
                 mulBenchmark·p0.9999: 28508.160 us/op
                 mulBenchmark·p1.00:   28508.160 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 6234
  mean =   6411.717 ±(99.9%) 69.107 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 6228 
    [ 12500.000,  25000.000) = 4 
    [ 25000.000,  37500.000) = 1 
    [ 37500.000,  50000.000) = 0 
    [ 50000.000,  62500.000) = 0 
    [ 62500.000,  75000.000) = 0 
    [ 75000.000,  87500.000) = 0 
    [ 87500.000, 100000.000) = 0 
    [100000.000, 112500.000) = 0 
    [112500.000, 125000.000) = 0 
    [125000.000, 137500.000) = 1 
    [137500.000, 150000.000) = 0 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   5996.544 us/op
     p(50.0000) =   6225.920 us/op
     p(90.0000) =   6856.704 us/op
     p(95.0000) =   6930.432 us/op
     p(99.0000) =   7634.944 us/op
     p(99.9000) =  17014.211 us/op
     p(99.9900) = 129761.280 us/op
     p(99.9990) = 129761.280 us/op
     p(99.9999) = 129761.280 us/op
    p(100.0000) = 129761.280 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 5, toolName = la4j)

# Run progress: 89.29% complete, ETA 00:16:21
# Fork: 1 of 1
# Warmup Iteration   1: 6990.732 ±(99.9%) 103.258 us/op
# Warmup Iteration   2: 6945.985 ±(99.9%) 58.949 us/op
# Warmup Iteration   3: 6892.698 ±(99.9%) 49.387 us/op
Iteration   1: 6995.524 ±(99.9%) 109.370 us/op
                 mulBenchmark·p0.00:   6709.248 us/op
                 mulBenchmark·p0.50:   6971.392 us/op
                 mulBenchmark·p0.90:   7045.120 us/op
                 mulBenchmark·p0.95:   7069.696 us/op
                 mulBenchmark·p0.99:   7249.920 us/op
                 mulBenchmark·p0.999:  14600.241 us/op
                 mulBenchmark·p0.9999: 100663.296 us/op
                 mulBenchmark·p1.00:   100663.296 us/op

Iteration   2: 7016.498 ±(99.9%) 23.684 us/op
                 mulBenchmark·p0.00:   6881.280 us/op
                 mulBenchmark·p0.50:   6987.776 us/op
                 mulBenchmark·p0.90:   7069.696 us/op
                 mulBenchmark·p0.95:   7135.232 us/op
                 mulBenchmark·p0.99:   7311.360 us/op
                 mulBenchmark·p0.999:  12135.629 us/op
                 mulBenchmark·p0.9999: 22380.544 us/op
                 mulBenchmark·p1.00:   22380.544 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 5707
  mean =   7005.994 ±(99.9%) 56.001 us/op

  Histogram, us/op:
    [     0.000,  10000.000) = 5699 
    [ 10000.000,  20000.000) = 6 
    [ 20000.000,  30000.000) = 1 
    [ 30000.000,  40000.000) = 0 
    [ 40000.000,  50000.000) = 0 
    [ 50000.000,  60000.000) = 0 
    [ 60000.000,  70000.000) = 0 
    [ 70000.000,  80000.000) = 0 
    [ 80000.000,  90000.000) = 0 
    [ 90000.000, 100000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   6709.248 us/op
     p(50.0000) =   6979.584 us/op
     p(90.0000) =   7053.312 us/op
     p(95.0000) =   7094.272 us/op
     p(99.0000) =   7290.880 us/op
     p(99.9000) =  13932.167 us/op
     p(99.9900) = 100663.296 us/op
     p(99.9990) = 100663.296 us/op
     p(99.9999) = 100663.296 us/op
    p(100.0000) = 100663.296 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 5, toolName = nd4j)

# Run progress: 90.48% complete, ETA 00:14:32
# Fork: 1 of 1
# Warmup Iteration   1: 505.746 ±(99.9%) 3.316 us/op
# Warmup Iteration   2: 500.225 ±(99.9%) 4.601 us/op
# Warmup Iteration   3: 500.692 ±(99.9%) 4.563 us/op
Iteration   1: 494.418 ±(99.9%) 2.446 us/op
                 mulBenchmark·p0.00:   420.864 us/op
                 mulBenchmark·p0.50:   491.520 us/op
                 mulBenchmark·p0.90:   529.408 us/op
                 mulBenchmark·p0.95:   541.696 us/op
                 mulBenchmark·p0.99:   565.248 us/op
                 mulBenchmark·p0.999:  604.918 us/op
                 mulBenchmark·p0.9999: 7650.787 us/op
                 mulBenchmark·p1.00:   17563.648 us/op

Iteration   2: 413.361 ±(99.9%) 116.909 us/op
                 mulBenchmark·p0.00:   97.280 us/op
                 mulBenchmark·p0.50:   323.584 us/op
                 mulBenchmark·p0.90:   515.584 us/op
                 mulBenchmark·p0.95:   529.408 us/op
                 mulBenchmark·p0.99:   556.032 us/op
                 mulBenchmark·p0.999:  592.896 us/op
                 mulBenchmark·p0.9999: 2061.975 us/op
                 mulBenchmark·p1.00:   1717567.488 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 88760
  mean =    450.273 ±(99.9%) 63.681 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 88759 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 0 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 0 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 1 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     97.280 us/op
     p(50.0000) =    474.112 us/op
     p(90.0000) =    523.776 us/op
     p(95.0000) =    536.576 us/op
     p(99.0000) =    561.152 us/op
     p(99.9000) =    598.016 us/op
     p(99.9900) =   5413.614 us/op
     p(99.9990) = 1717567.488 us/op
     p(99.9999) = 1717567.488 us/op
    p(100.0000) = 1717567.488 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 5, toolName = jBlas)

# Run progress: 91.67% complete, ETA 00:12:43
# Fork: 1 of 1
# Warmup Iteration   1: 545.978 ±(99.9%) 26.709 us/op
# Warmup Iteration   2: 425.060 ±(99.9%) 4.416 us/op
# Warmup Iteration   3: 427.551 ±(99.9%) 5.377 us/op
Iteration   1: 404.081 ±(99.9%) 4.129 us/op
                 mulBenchmark·p0.00:   364.544 us/op
                 mulBenchmark·p0.50:   390.656 us/op
                 mulBenchmark·p0.90:   428.544 us/op
                 mulBenchmark·p0.95:   479.232 us/op
                 mulBenchmark·p0.99:   492.032 us/op
                 mulBenchmark·p0.999:  1072.988 us/op
                 mulBenchmark·p0.9999: 15527.576 us/op
                 mulBenchmark·p1.00:   27525.120 us/op

Iteration   2: 409.501 ±(99.9%) 4.036 us/op
                 mulBenchmark·p0.00:   358.912 us/op
                 mulBenchmark·p0.50:   404.992 us/op
                 mulBenchmark·p0.90:   430.592 us/op
                 mulBenchmark·p0.95:   448.000 us/op
                 mulBenchmark·p0.99:   500.224 us/op
                 mulBenchmark·p0.999:  917.320 us/op
                 mulBenchmark·p0.9999: 14354.383 us/op
                 mulBenchmark·p1.00:   38797.312 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 98241
  mean =    406.773 ±(99.9%) 2.888 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 98201 
    [ 2500.000,  5000.000) = 14 
    [ 5000.000,  7500.000) = 5 
    [ 7500.000, 10000.000) = 1 
    [10000.000, 12500.000) = 7 
    [12500.000, 15000.000) = 4 
    [15000.000, 17500.000) = 3 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 2 
    [27500.000, 30000.000) = 2 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    358.912 us/op
     p(50.0000) =    391.680 us/op
     p(90.0000) =    430.592 us/op
     p(95.0000) =    473.088 us/op
     p(99.0000) =    494.080 us/op
     p(99.9000) =   1019.357 us/op
     p(99.9900) =  14401.687 us/op
     p(99.9990) =  38797.312 us/op
     p(99.9999) =  38797.312 us/op
    p(100.0000) =  38797.312 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 6, toolName = commonMath3)

# Run progress: 92.86% complete, ETA 00:10:54
# Fork: 1 of 1
# Warmup Iteration   1: 1272.306 ±(99.9%) 17.009 us/op
# Warmup Iteration   2: 1224.090 ±(99.9%) 11.354 us/op
# Warmup Iteration   3: 1221.801 ±(99.9%) 9.582 us/op
Iteration   1: 1212.260 ±(99.9%) 25.520 us/op
                 mulBenchmark·p0.00:   1013.760 us/op
                 mulBenchmark·p0.50:   1204.224 us/op
                 mulBenchmark·p0.90:   1245.184 us/op
                 mulBenchmark·p0.95:   1259.520 us/op
                 mulBenchmark·p0.99:   1294.336 us/op
                 mulBenchmark·p0.999:  2222.682 us/op
                 mulBenchmark·p0.9999: 54357.859 us/op
                 mulBenchmark·p1.00:   127795.200 us/op

Iteration   2: 1217.063 ±(99.9%) 14.639 us/op
                 mulBenchmark·p0.00:   1034.240 us/op
                 mulBenchmark·p0.50:   1210.368 us/op
                 mulBenchmark·p0.90:   1247.232 us/op
                 mulBenchmark·p0.95:   1261.568 us/op
                 mulBenchmark·p0.99:   1298.432 us/op
                 mulBenchmark·p0.999:  1678.807 us/op
                 mulBenchmark·p0.9999: 38124.408 us/op
                 mulBenchmark·p1.00:   68681.728 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 32897
  mean =   1214.657 ±(99.9%) 14.723 us/op

  Histogram, us/op:
    [     0.000,  12500.000) = 32892 
    [ 12500.000,  25000.000) = 3 
    [ 25000.000,  37500.000) = 0 
    [ 37500.000,  50000.000) = 0 
    [ 50000.000,  62500.000) = 0 
    [ 62500.000,  75000.000) = 1 
    [ 75000.000,  87500.000) = 0 
    [ 87500.000, 100000.000) = 0 
    [100000.000, 112500.000) = 0 
    [112500.000, 125000.000) = 0 
    [125000.000, 137500.000) = 1 
    [137500.000, 150000.000) = 0 
    [150000.000, 162500.000) = 0 
    [162500.000, 175000.000) = 0 
    [175000.000, 187500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1013.760 us/op
     p(50.0000) =   1208.320 us/op
     p(90.0000) =   1247.232 us/op
     p(95.0000) =   1261.568 us/op
     p(99.0000) =   1296.384 us/op
     p(99.9000) =   1838.809 us/op
     p(99.9900) =  19521.949 us/op
     p(99.9990) = 127795.200 us/op
     p(99.9999) = 127795.200 us/op
    p(100.0000) = 127795.200 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 6, toolName = colt)

# Run progress: 94.05% complete, ETA 00:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 1163.651 ±(99.9%) 6.675 us/op
# Warmup Iteration   2: 1185.327 ±(99.9%) 33.093 us/op
# Warmup Iteration   3: 1148.504 ±(99.9%) 7.006 us/op
Iteration   1: 1137.184 ±(99.9%) 2.578 us/op
                 mulBenchmark·p0.00:   1116.160 us/op
                 mulBenchmark·p0.50:   1126.400 us/op
                 mulBenchmark·p0.90:   1136.640 us/op
                 mulBenchmark·p0.95:   1155.072 us/op
                 mulBenchmark·p0.99:   1350.246 us/op
                 mulBenchmark·p0.999:  2125.251 us/op
                 mulBenchmark·p0.9999: 6248.202 us/op
                 mulBenchmark·p1.00:   6496.256 us/op

Iteration   2: 1143.710 ±(99.9%) 4.669 us/op
                 mulBenchmark·p0.00:   1116.160 us/op
                 mulBenchmark·p0.50:   1140.736 us/op
                 mulBenchmark·p0.90:   1153.024 us/op
                 mulBenchmark·p0.95:   1159.168 us/op
                 mulBenchmark·p0.99:   1181.696 us/op
                 mulBenchmark·p0.999:  2441.929 us/op
                 mulBenchmark·p0.9999: 15311.474 us/op
                 mulBenchmark·p1.00:   19693.568 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 35039
  mean =   1140.438 ±(99.9%) 2.663 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 34724 
    [ 1250.000,  2500.000) = 286 
    [ 2500.000,  3750.000) = 16 
    [ 3750.000,  5000.000) = 8 
    [ 5000.000,  6250.000) = 2 
    [ 6250.000,  7500.000) = 1 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 0 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 1 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =   1116.160 us/op
     p(50.0000) =   1128.448 us/op
     p(90.0000) =   1150.976 us/op
     p(95.0000) =   1157.120 us/op
     p(99.0000) =   1232.077 us/op
     p(99.9000) =   2308.014 us/op
     p(99.9900) =   6331.105 us/op
     p(99.9990) =  19693.568 us/op
     p(99.9999) =  19693.568 us/op
    p(100.0000) =  19693.568 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 6, toolName = ejml)

# Run progress: 95.24% complete, ETA 00:07:16
# Fork: 1 of 1
# Warmup Iteration   1: 769.588 ±(99.9%) 3.069 us/op
# Warmup Iteration   2: 780.192 ±(99.9%) 20.274 us/op
# Warmup Iteration   3: 801.483 ±(99.9%) 16.899 us/op
Iteration   1: 801.779 ±(99.9%) 2.248 us/op
                 mulBenchmark·p0.00:   737.280 us/op
                 mulBenchmark·p0.50:   790.528 us/op
                 mulBenchmark·p0.90:   829.440 us/op
                 mulBenchmark·p0.95:   870.400 us/op
                 mulBenchmark·p0.99:   907.264 us/op
                 mulBenchmark·p0.999:  1022.634 us/op
                 mulBenchmark·p0.9999: 5006.161 us/op
                 mulBenchmark·p1.00:   12484.608 us/op

Iteration   2: 794.912 ±(99.9%) 2.065 us/op
                 mulBenchmark·p0.00:   757.760 us/op
                 mulBenchmark·p0.50:   784.384 us/op
                 mulBenchmark·p0.90:   811.008 us/op
                 mulBenchmark·p0.95:   825.344 us/op
                 mulBenchmark·p0.99:   951.296 us/op
                 mulBenchmark·p0.999:  1381.812 us/op
                 mulBenchmark·p0.9999: 5295.999 us/op
                 mulBenchmark·p1.00:   10436.608 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 50067
  mean =    798.331 ±(99.9%) 1.526 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 50008 
    [ 1250.000,  2500.000) = 31 
    [ 2500.000,  3750.000) = 14 
    [ 3750.000,  5000.000) = 10 
    [ 5000.000,  6250.000) = 2 
    [ 6250.000,  7500.000) = 0 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 1 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    737.280 us/op
     p(50.0000) =    785.408 us/op
     p(90.0000) =    814.080 us/op
     p(95.0000) =    861.184 us/op
     p(99.0000) =    911.360 us/op
     p(99.9000) =   1318.773 us/op
     p(99.9900) =   4947.968 us/op
     p(99.9990) =  12484.608 us/op
     p(99.9999) =  12484.608 us/op
    p(100.0000) =  12484.608 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 6, toolName = la4j)

# Run progress: 96.43% complete, ETA 00:05:26
# Fork: 1 of 1
# Warmup Iteration   1: 893.426 ±(99.9%) 19.807 us/op
# Warmup Iteration   2: 869.620 ±(99.9%) 7.005 us/op
# Warmup Iteration   3: 883.285 ±(99.9%) 2.297 us/op
Iteration   1: 875.106 ±(99.9%) 3.229 us/op
                 mulBenchmark·p0.00:   824.320 us/op
                 mulBenchmark·p0.50:   866.304 us/op
                 mulBenchmark·p0.90:   888.832 us/op
                 mulBenchmark·p0.95:   897.024 us/op
                 mulBenchmark·p0.99:   974.449 us/op
                 mulBenchmark·p0.999:  1976.979 us/op
                 mulBenchmark·p0.9999: 10125.024 us/op
                 mulBenchmark·p1.00:   13975.552 us/op

Iteration   2: 869.963 ±(99.9%) 2.267 us/op
                 mulBenchmark·p0.00:   823.296 us/op
                 mulBenchmark·p0.50:   864.256 us/op
                 mulBenchmark·p0.90:   877.568 us/op
                 mulBenchmark·p0.95:   889.856 us/op
                 mulBenchmark·p0.99:   983.296 us/op
                 mulBenchmark·p0.999:  1540.352 us/op
                 mulBenchmark·p0.9999: 5430.825 us/op
                 mulBenchmark·p1.00:   10076.160 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 45812
  mean =    872.527 ±(99.9%) 1.971 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 45651 
    [ 1250.000,  2500.000) = 129 
    [ 2500.000,  3750.000) = 12 
    [ 3750.000,  5000.000) = 12 
    [ 5000.000,  6250.000) = 5 
    [ 6250.000,  7500.000) = 0 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 1 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 1 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =    823.296 us/op
     p(50.0000) =    865.280 us/op
     p(90.0000) =    884.736 us/op
     p(95.0000) =    894.976 us/op
     p(99.0000) =    978.944 us/op
     p(99.9000) =   1698.175 us/op
     p(99.9900) =   5533.996 us/op
     p(99.9990) =  13975.552 us/op
     p(99.9999) =  13975.552 us/op
    p(100.0000) =  13975.552 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 6, toolName = nd4j)

# Run progress: 97.62% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 74.373 ±(99.9%) 0.157 us/op
# Warmup Iteration   2: 74.334 ±(99.9%) 0.132 us/op
# Warmup Iteration   3: 85.434 ±(99.9%) 0.207 us/op
Iteration   1: 63.450 ±(99.9%) 11.136 us/op
                 mulBenchmark·p0.00:   26.976 us/op
                 mulBenchmark·p0.50:   46.976 us/op
                 mulBenchmark·p0.90:   104.832 us/op
                 mulBenchmark·p0.95:   107.264 us/op
                 mulBenchmark·p0.99:   113.408 us/op
                 mulBenchmark·p0.999:  134.002 us/op
                 mulBenchmark·p0.9999: 1629.459 us/op
                 mulBenchmark·p1.00:   1064304.640 us/op

Iteration   2: 37.248 ±(99.9%) 8.791 us/op
                 mulBenchmark·p0.00:   26.752 us/op
                 mulBenchmark·p0.50:   31.232 us/op
                 mulBenchmark·p0.90:   46.976 us/op
                 mulBenchmark·p0.95:   48.640 us/op
                 mulBenchmark·p0.99:   71.680 us/op
                 mulBenchmark·p0.999:  102.817 us/op
                 mulBenchmark·p0.9999: 1633.027 us/op
                 mulBenchmark·p1.00:   744488.960 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 593296
  mean =     51.140 ±(99.9%) 7.205 us/op

  Histogram, us/op:
    [      0.000,  125000.000) = 593294 
    [ 125000.000,  250000.000) = 0 
    [ 250000.000,  375000.000) = 0 
    [ 375000.000,  500000.000) = 0 
    [ 500000.000,  625000.000) = 0 
    [ 625000.000,  750000.000) = 1 
    [ 750000.000,  875000.000) = 0 
    [ 875000.000, 1000000.000) = 0 
    [1000000.000, 1125000.000) = 1 
    [1125000.000, 1250000.000) = 0 
    [1250000.000, 1375000.000) = 0 
    [1375000.000, 1500000.000) = 0 
    [1500000.000, 1625000.000) = 0 
    [1625000.000, 1750000.000) = 0 
    [1750000.000, 1875000.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     26.752 us/op
     p(50.0000) =     32.896 us/op
     p(90.0000) =    101.632 us/op
     p(95.0000) =    105.088 us/op
     p(99.0000) =    110.720 us/op
     p(99.9000) =    128.986 us/op
     p(99.9900) =   1630.230 us/op
     p(99.9990) =   4824.034 us/op
     p(99.9999) = 1064304.640 us/op
    p(100.0000) = 1064304.640 us/op


# JMH version: 1.26
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10
# VM invoker: /usr/lib/jvm/java-11-openjdk/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 2 iterations, 20 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark
# Parameters: (n = 6, toolName = jBlas)

# Run progress: 98.81% complete, ETA 00:01:48
# Fork: 1 of 1
# Warmup Iteration   1: 104.667 ±(99.9%) 4.190 us/op
# Warmup Iteration   2: 113.398 ±(99.9%) 1.104 us/op
# Warmup Iteration   3: 105.330 ±(99.9%) 1.599 us/op
Iteration   1: 95.767 ±(99.9%) 0.441 us/op
                 mulBenchmark·p0.00:   81.024 us/op
                 mulBenchmark·p0.50:   89.216 us/op
                 mulBenchmark·p0.90:   109.824 us/op
                 mulBenchmark·p0.95:   112.128 us/op
                 mulBenchmark·p0.99:   123.264 us/op
                 mulBenchmark·p0.999:  163.475 us/op
                 mulBenchmark·p0.9999: 3221.393 us/op
                 mulBenchmark·p1.00:   10469.376 us/op

Iteration   2: 106.883 ±(99.9%) 0.794 us/op
                 mulBenchmark·p0.00:   81.280 us/op
                 mulBenchmark·p0.50:   107.136 us/op
                 mulBenchmark·p0.90:   115.840 us/op
                 mulBenchmark·p0.95:   122.496 us/op
                 mulBenchmark·p0.99:   157.184 us/op
                 mulBenchmark·p0.999:  282.229 us/op
                 mulBenchmark·p0.9999: 3546.495 us/op
                 mulBenchmark·p1.00:   30146.560 us/op



Result "com.kinderlas.demo.benchmark.java.matrix.bench.JavaMatrixBenchmark.mulBenchmark":
  N = 395193
  mean =    101.020 ±(99.9%) 0.442 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 395135 
    [ 2500.000,  5000.000) = 45 
    [ 5000.000,  7500.000) = 2 
    [ 7500.000, 10000.000) = 6 
    [10000.000, 12500.000) = 3 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 1 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, us/op:
      p(0.0000) =     81.024 us/op
     p(50.0000) =    103.040 us/op
     p(90.0000) =    112.896 us/op
     p(95.0000) =    117.248 us/op
     p(99.0000) =    138.240 us/op
     p(99.9000) =    271.360 us/op
     p(99.9900) =   3318.616 us/op
     p(99.9990) =  10476.463 us/op
     p(99.9999) =  30146.560 us/op
    p(100.0000) =  30146.560 us/op


# Run complete. Total time: 02:32:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              (n)   (toolName)    Mode      Cnt         Score          Error  Units
JavaMatrixBenchmark.addBenchmark                         0  commonMath3  sample   794627        50.206 ±        0.251  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      0  commonMath3  sample                 27.904                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      0  commonMath3  sample                 48.704                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      0  commonMath3  sample                 56.640                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      0  commonMath3  sample                 61.184                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      0  commonMath3  sample                 69.376                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     0  commonMath3  sample                110.848                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    0  commonMath3  sample               1384.347                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      0  commonMath3  sample              31358.976                 us/op
JavaMatrixBenchmark.addBenchmark                         0         colt  sample  1054405         0.059 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      0         colt  sample                  0.055                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      0         colt  sample                  0.058                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      0         colt  sample                  0.059                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      0         colt  sample                  0.059                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      0         colt  sample                  0.061                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     0         colt  sample                  0.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    0         colt  sample                  2.142                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      0         colt  sample                 39.872                 us/op
JavaMatrixBenchmark.addBenchmark                         0         ejml  sample  1083556        18.483 ±        0.133  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      0         ejml  sample                 11.824                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      0         ejml  sample                 16.288                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      0         ejml  sample                 22.656                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      0         ejml  sample                 25.440                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      0         ejml  sample                 32.896                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     0         ejml  sample                 82.688                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    0         ejml  sample                211.808                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      0         ejml  sample              13778.944                 us/op
JavaMatrixBenchmark.addBenchmark                         0         la4j  sample   458892        43.776 ±        0.430  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      0         la4j  sample                 21.664                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      0         la4j  sample                 42.496                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      0         la4j  sample                 51.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      0         la4j  sample                 56.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      0         la4j  sample                 96.768                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     0         la4j  sample                109.184                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    0         la4j  sample               2433.009                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      0         la4j  sample              35061.760                 us/op
JavaMatrixBenchmark.addBenchmark                         0         nd4j  sample   587762        52.611 ±        8.726  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      0         nd4j  sample                 13.408                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      0         nd4j  sample                 51.520                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      0         nd4j  sample                 57.856                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      0         nd4j  sample                 60.736                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      0         nd4j  sample                 72.960                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     0         nd4j  sample                340.844                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    0         nd4j  sample               2796.221                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      0         nd4j  sample            1558183.936                 us/op
JavaMatrixBenchmark.addBenchmark                         0        jBlas  sample   889162        17.125 ±        0.223  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      0        jBlas  sample                 11.856                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      0        jBlas  sample                 15.344                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      0        jBlas  sample                 18.944                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      0        jBlas  sample                 22.464                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      0        jBlas  sample                 33.152                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     0        jBlas  sample                 70.635                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    0        jBlas  sample               1743.209                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      0        jBlas  sample              23003.136                 us/op
JavaMatrixBenchmark.addBenchmark                         1  commonMath3  sample    13233      3017.115 ±       20.038  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      1  commonMath3  sample               2082.816                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      1  commonMath3  sample               2875.392                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      1  commonMath3  sample               3059.712                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      1  commonMath3  sample               4116.480                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      1  commonMath3  sample               5346.591                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     1  commonMath3  sample              10672.636                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    1  commonMath3  sample              25662.515                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      1  commonMath3  sample              26542.080                 us/op
JavaMatrixBenchmark.addBenchmark                         1         colt  sample  1568297         0.072 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      1         colt  sample                  0.067                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      1         colt  sample                  0.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      1         colt  sample                  0.074                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      1         colt  sample                  0.074                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      1         colt  sample                  0.076                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     1         colt  sample                  0.081                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    1         colt  sample                  1.932                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      1         colt  sample                 21.888                 us/op
JavaMatrixBenchmark.addBenchmark                         1         ejml  sample    13771      2897.232 ±       30.136  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      1         ejml  sample               1849.344                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      1         ejml  sample               2498.560                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      1         ejml  sample               4072.243                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      1         ejml  sample               5111.808                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      1         ejml  sample               7932.150                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     1         ejml  sample               8881.832                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    1         ejml  sample              20665.598                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      1         ejml  sample              25362.432                 us/op
JavaMatrixBenchmark.addBenchmark                         1         la4j  sample    12702      3143.707 ±       25.386  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      1         la4j  sample               2134.016                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      1         la4j  sample               2932.736                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      1         la4j  sample               3993.600                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      1         la4j  sample               4218.880                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      1         la4j  sample               6094.111                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     1         la4j  sample              15413.772                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    1         la4j  sample              26323.275                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      1         la4j  sample              26836.992                 us/op
JavaMatrixBenchmark.addBenchmark                         1         nd4j  sample    63083       646.881 ±      167.171  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      1         nd4j  sample                140.288                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      1         nd4j  sample                509.952                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      1         nd4j  sample                548.864                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      1         nd4j  sample                564.224                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      1         nd4j  sample               2404.352                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     1         nd4j  sample               2908.160                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    1         nd4j  sample             833961.853                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      1         nd4j  sample            1512046.592                 us/op
JavaMatrixBenchmark.addBenchmark                         1        jBlas  sample    13569      2941.961 ±       33.061  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      1        jBlas  sample               1873.920                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      1        jBlas  sample               2494.464                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      1        jBlas  sample               4694.016                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      1        jBlas  sample               5472.256                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      1        jBlas  sample               7782.400                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     1        jBlas  sample               9318.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    1        jBlas  sample              15134.458                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      1        jBlas  sample              15941.632                 us/op
JavaMatrixBenchmark.addBenchmark                         2  commonMath3  sample    34692      1151.574 ±        5.342  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      2  commonMath3  sample                624.640                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      2  commonMath3  sample               1107.968                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      2  commonMath3  sample               1257.472                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      2  commonMath3  sample               1314.816                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      2  commonMath3  sample               1466.368                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     2  commonMath3  sample               5976.351                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    2  commonMath3  sample              12866.829                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      2  commonMath3  sample              17596.416                 us/op
JavaMatrixBenchmark.addBenchmark                         2         colt  sample  1058244         0.059 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      2         colt  sample                  0.054                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      2         colt  sample                  0.058                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      2         colt  sample                  0.060                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      2         colt  sample                  0.061                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      2         colt  sample                  0.062                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     2         colt  sample                  0.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    2         colt  sample                  2.481                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      2         colt  sample                 50.496                 us/op
JavaMatrixBenchmark.addBenchmark                         2         ejml  sample    52232       765.047 ±        3.602  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      2         ejml  sample                360.448                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      2         ejml  sample                756.736                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      2         ejml  sample                786.432                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      2         ejml  sample                812.032                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      2         ejml  sample               1087.488                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     2         ejml  sample               4939.538                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    2         ejml  sample              11892.559                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      2         ejml  sample              17432.576                 us/op
JavaMatrixBenchmark.addBenchmark                         2         la4j  sample    38893      1027.394 ±        5.415  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      2         la4j  sample                634.880                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      2         la4j  sample                963.584                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      2         la4j  sample               1173.504                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      2         la4j  sample               1269.760                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      2         la4j  sample               1704.182                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     2         la4j  sample               5902.582                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    2         la4j  sample              10467.338                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      2         la4j  sample              20971.520                 us/op
JavaMatrixBenchmark.addBenchmark                         2         nd4j  sample   191142       208.978 ±       53.331  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      2         nd4j  sample                 46.912                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      2         nd4j  sample                179.456                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      2         nd4j  sample                201.472                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      2         nd4j  sample                207.872                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      2         nd4j  sample                228.352                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     2         nd4j  sample                371.784                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    2         nd4j  sample               3421.915                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      2         nd4j  sample            1482686.464                 us/op
JavaMatrixBenchmark.addBenchmark                         2        jBlas  sample    62556       638.596 ±        4.248  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      2        jBlas  sample                342.528                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      2        jBlas  sample                576.512                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      2        jBlas  sample                667.648                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      2        jBlas  sample                756.736                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      2        jBlas  sample               2125.824                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     2        jBlas  sample               4051.358                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    2        jBlas  sample              10417.236                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      2        jBlas  sample              12746.752                 us/op
JavaMatrixBenchmark.addBenchmark                         3  commonMath3  sample    82310       485.493 ±        2.685  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      3  commonMath3  sample                312.832                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      3  commonMath3  sample                470.016                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      3  commonMath3  sample                520.704                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      3  commonMath3  sample                624.640                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      3  commonMath3  sample                707.584                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     3  commonMath3  sample               1875.468                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    3  commonMath3  sample              12314.434                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      3  commonMath3  sample              31162.368                 us/op
JavaMatrixBenchmark.addBenchmark                         3         colt  sample   906600         0.066 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      3         colt  sample                  0.060                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      3         colt  sample                  0.065                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      3         colt  sample                  0.066                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      3         colt  sample                  0.068                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      3         colt  sample                  0.069                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     3         colt  sample                  0.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    3         colt  sample                  3.269                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      3         colt  sample                 38.976                 us/op
JavaMatrixBenchmark.addBenchmark                         3         ejml  sample   141473       282.305 ±        1.296  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      3         ejml  sample                167.936                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      3         ejml  sample                280.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      3         ejml  sample                300.544                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      3         ejml  sample                316.416                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      3         ejml  sample                429.568                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     3         ejml  sample               2008.117                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    3         ejml  sample               5648.857                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      3         ejml  sample              17727.488                 us/op
JavaMatrixBenchmark.addBenchmark                         3         la4j  sample    83382       479.191 ±        2.313  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      3         la4j  sample                308.224                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      3         la4j  sample                469.504                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      3         la4j  sample                504.832                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      3         la4j  sample                567.296                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      3         la4j  sample                650.240                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     3         la4j  sample               2026.779                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    3         la4j  sample              11421.773                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      3         la4j  sample              27394.048                 us/op
JavaMatrixBenchmark.addBenchmark                         3         nd4j  sample   329386       121.257 ±       30.833  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      3         nd4j  sample                 31.936                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      3         nd4j  sample                102.016                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      3         nd4j  sample                112.896                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      3         nd4j  sample                116.224                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      3         nd4j  sample                131.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     3         nd4j  sample                275.968                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    3         nd4j  sample               2629.302                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      3         nd4j  sample            1449132.032                 us/op
JavaMatrixBenchmark.addBenchmark                         3        jBlas  sample   108824       367.147 ±        1.608  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      3        jBlas  sample                168.448                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      3        jBlas  sample                373.760                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      3        jBlas  sample                395.776                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      3        jBlas  sample                409.088                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      3        jBlas  sample                543.744                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     3        jBlas  sample               1886.106                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    3        jBlas  sample               6258.196                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      3        jBlas  sample              27951.104                 us/op
JavaMatrixBenchmark.addBenchmark                         4  commonMath3  sample   199311       200.402 ±        0.929  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      4  commonMath3  sample                128.768                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      4  commonMath3  sample                198.656                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      4  commonMath3  sample                230.912                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      4  commonMath3  sample                253.440                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      4  commonMath3  sample                269.824                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     4  commonMath3  sample                332.800                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    4  commonMath3  sample               4893.245                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      4  commonMath3  sample              24412.160                 us/op
JavaMatrixBenchmark.addBenchmark                         4         colt  sample  1052743         0.059 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      4         colt  sample                  0.054                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      4         colt  sample                  0.058                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      4         colt  sample                  0.060                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      4         colt  sample                  0.060                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      4         colt  sample                  0.062                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     4         colt  sample                  0.065                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    4         colt  sample                  1.993                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      4         colt  sample                 34.752                 us/op
JavaMatrixBenchmark.addBenchmark                         4         ejml  sample   375866       106.207 ±        0.618  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      4         ejml  sample                 62.592                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      4         ejml  sample                102.400                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      4         ejml  sample                126.976                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      4         ejml  sample                146.432                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      4         ejml  sample                165.376                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     4         ejml  sample                227.874                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    4         ejml  sample               5510.375                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      4         ejml  sample              22609.920                 us/op
JavaMatrixBenchmark.addBenchmark                         4         la4j  sample   185329       215.525 ±        0.924  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      4         la4j  sample                134.144                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      4         la4j  sample                212.480                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      4         la4j  sample                243.456                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      4         la4j  sample                253.440                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      4         la4j  sample                288.256                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     4         la4j  sample                458.097                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    4         la4j  sample               6130.901                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      4         la4j  sample              18513.920                 us/op
JavaMatrixBenchmark.addBenchmark                         4         nd4j  sample   755439        52.822 ±       11.835  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      4         nd4j  sample                 19.616                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      4         nd4j  sample                 48.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      4         nd4j  sample                 54.016                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      4         nd4j  sample                 56.576                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      4         nd4j  sample                 74.368                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     4         nd4j  sample                159.488                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    4         nd4j  sample               2109.440                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      4         nd4j  sample            1725956.096                 us/op
JavaMatrixBenchmark.addBenchmark                         4        jBlas  sample   394526       101.183 ±        0.455  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      4        jBlas  sample                 61.248                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      4        jBlas  sample                 98.816                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      4        jBlas  sample                110.464                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      4        jBlas  sample                116.864                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      4        jBlas  sample                152.576                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     4        jBlas  sample                180.857                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    4        jBlas  sample               4833.280                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      4        jBlas  sample              23166.976                 us/op
JavaMatrixBenchmark.addBenchmark                         5  commonMath3  sample   272351       146.601 ±        0.811  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      5  commonMath3  sample                 92.800                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      5  commonMath3  sample                141.824                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      5  commonMath3  sample                177.920                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      5  commonMath3  sample                191.744                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      5  commonMath3  sample                222.720                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     5  commonMath3  sample                306.328                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    5  commonMath3  sample               4962.425                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      5  commonMath3  sample              37027.840                 us/op
JavaMatrixBenchmark.addBenchmark                         5         colt  sample   843834         0.069 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      5         colt  sample                  0.062                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      5         colt  sample                  0.068                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      5         colt  sample                  0.070                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      5         colt  sample                  0.070                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      5         colt  sample                  0.071                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     5         colt  sample                  0.073                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    5         colt  sample                  7.798                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      5         colt  sample                 33.472                 us/op
JavaMatrixBenchmark.addBenchmark                         5         ejml  sample   520118        76.727 ±        0.386  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      5         ejml  sample                 43.648                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      5         ejml  sample                 72.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      5         ejml  sample                100.352                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      5         ejml  sample                106.624                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      5         ejml  sample                116.864                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     5         ejml  sample                139.264                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    5         ejml  sample               3775.878                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      5         ejml  sample              16875.520                 us/op
JavaMatrixBenchmark.addBenchmark                         5         la4j  sample   244479       163.332 ±        0.690  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      5         la4j  sample                 97.664                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      5         la4j  sample                152.576                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      5         la4j  sample                198.912                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      5         la4j  sample                217.856                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      5         la4j  sample                358.912                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     5         la4j  sample                400.384                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    5         la4j  sample               4297.916                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      5         la4j  sample              16973.824                 us/op
JavaMatrixBenchmark.addBenchmark                         5         nd4j  sample   709481        29.570 ±        4.310  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      5         nd4j  sample                 17.344                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      5         nd4j  sample                 20.352                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      5         nd4j  sample                 38.144                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      5         nd4j  sample                 44.480                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      5         nd4j  sample                 73.984                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     5         nd4j  sample                260.626                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    5         nd4j  sample               2625.536                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      5         nd4j  sample             529006.592                 us/op
JavaMatrixBenchmark.addBenchmark                         5        jBlas  sample   563599        70.794 ±        0.344  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      5        jBlas  sample                 43.200                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      5        jBlas  sample                 67.456                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      5        jBlas  sample                 79.232                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      5        jBlas  sample                 87.168                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      5        jBlas  sample                114.176                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     5        jBlas  sample                128.384                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    5        jBlas  sample               4830.331                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      5        jBlas  sample              13271.040                 us/op
JavaMatrixBenchmark.addBenchmark                         6  commonMath3  sample   603809        33.206 ±        0.238  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      6  commonMath3  sample                 21.952                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      6  commonMath3  sample                 30.720                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      6  commonMath3  sample                 39.616                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      6  commonMath3  sample                 42.752                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      6  commonMath3  sample                 51.840                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     6  commonMath3  sample                123.776                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    6  commonMath3  sample               1715.345                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      6  commonMath3  sample              14401.536                 us/op
JavaMatrixBenchmark.addBenchmark                         6         colt  sample  1577784         0.070 ±        0.001  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      6         colt  sample                  0.066                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      6         colt  sample                  0.070                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      6         colt  sample                  0.071                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      6         colt  sample                  0.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      6         colt  sample                  0.072                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     6         colt  sample                  0.075                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    6         colt  sample                  1.936                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      6         colt  sample                 48.192                 us/op
JavaMatrixBenchmark.addBenchmark                         6         ejml  sample   721855        14.069 ±        0.207  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      6         ejml  sample                 10.096                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      6         ejml  sample                 12.960                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      6         ejml  sample                 14.480                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      6         ejml  sample                 16.800                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      6         ejml  sample                 24.640                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     6         ejml  sample                 70.144                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    6         ejml  sample               1727.581                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      6         ejml  sample              21725.184                 us/op
JavaMatrixBenchmark.addBenchmark                         6         la4j  sample   639023        31.430 ±        0.342  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      6         la4j  sample                 21.184                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      6         la4j  sample                 29.248                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      6         la4j  sample                 36.480                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      6         la4j  sample                 40.128                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      6         la4j  sample                 46.528                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     6         la4j  sample                 90.880                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    6         la4j  sample               1436.199                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      6         la4j  sample              33619.968                 us/op
JavaMatrixBenchmark.addBenchmark                         6         nd4j  sample   569543        36.257 ±        6.993  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      6         nd4j  sample                 14.160                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      6         nd4j  sample                 33.280                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      6         nd4j  sample                 39.232                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      6         nd4j  sample                 44.928                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      6         nd4j  sample                 79.488                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     6         nd4j  sample                146.944                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    6         nd4j  sample               1886.208                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      6         nd4j  sample            1210056.704                 us/op
JavaMatrixBenchmark.addBenchmark                         6        jBlas  sample  1137277        17.613 ±        0.185  us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.00      6        jBlas  sample                 10.064                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.50      6        jBlas  sample                 16.480                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.90      6        jBlas  sample                 20.608                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.95      6        jBlas  sample                 26.304                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.99      6        jBlas  sample                 34.496                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.999     6        jBlas  sample                 57.216                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p0.9999    6        jBlas  sample                223.441                 us/op
JavaMatrixBenchmark.addBenchmark:addBenchmark·p1.00      6        jBlas  sample              31457.280                 us/op
JavaMatrixBenchmark.mulBenchmark                         0  commonMath3  sample    31693      1260.867 ±       20.229  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      0  commonMath3  sample               1130.496                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      0  commonMath3  sample               1247.232                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      0  commonMath3  sample               1302.528                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      0  commonMath3  sample               1325.056                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      0  commonMath3  sample               1386.496                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     0  commonMath3  sample               2007.015                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    0  commonMath3  sample              12063.008                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      0  commonMath3  sample             194772.992                 us/op
JavaMatrixBenchmark.mulBenchmark                         0         colt  sample    37577      1063.462 ±       10.059  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      0         colt  sample               1020.928                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      0         colt  sample               1054.720                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      0         colt  sample               1071.104                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      0         colt  sample               1077.248                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      0         colt  sample               1110.016                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     0         colt  sample               1345.536                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    0         colt  sample              17026.702                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      0         colt  sample             111017.984                 us/op
JavaMatrixBenchmark.mulBenchmark                         0         ejml  sample    53121       752.413 ±        3.982  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      0         ejml  sample                719.872                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      0         ejml  sample                745.472                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      0         ejml  sample                761.856                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      0         ejml  sample                774.144                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      0         ejml  sample                834.560                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     0         ejml  sample               1391.387                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    0         ejml  sample               4013.061                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      0         ejml  sample              43057.152                 us/op
JavaMatrixBenchmark.mulBenchmark                         0         la4j  sample    13364      2990.625 ±       15.745  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      0         la4j  sample               2752.512                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      0         la4j  sample               2908.160                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      0         la4j  sample               2961.408                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      0         la4j  sample               3103.744                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      0         la4j  sample               4276.224                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     0         la4j  sample              10026.516                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    0         la4j  sample              25675.612                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      0         la4j  sample              28377.088                 us/op
JavaMatrixBenchmark.mulBenchmark                         0         nd4j  sample   432145        92.422 ±        0.306  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      0         nd4j  sample                 65.536                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      0         nd4j  sample                 91.136                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      0         nd4j  sample                 99.584                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      0         nd4j  sample                103.296                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      0         nd4j  sample                116.480                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     0         nd4j  sample                130.432                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    0         nd4j  sample               1665.024                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      0         nd4j  sample              20086.784                 us/op
JavaMatrixBenchmark.mulBenchmark                         0        jBlas  sample   348975       114.435 ±        0.519  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      0        jBlas  sample                 92.928                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      0        jBlas  sample                107.264                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      0        jBlas  sample                122.880                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      0        jBlas  sample                131.328                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      0        jBlas  sample                239.104                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     0        jBlas  sample                266.252                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    0        jBlas  sample               2784.539                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      0        jBlas  sample              28868.608                 us/op
JavaMatrixBenchmark.mulBenchmark                         1  commonMath3  sample        4  17465081.856 ± 10213974.717  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      1  commonMath3  sample           15871246.336                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      1  commonMath3  sample           17448304.640                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      1  commonMath3  sample           19092471.808                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      1  commonMath3  sample           19092471.808                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      1  commonMath3  sample           19092471.808                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     1  commonMath3  sample           19092471.808                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    1  commonMath3  sample           19092471.808                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      1  commonMath3  sample           19092471.808                 us/op
JavaMatrixBenchmark.mulBenchmark                         1         colt  sample       41    998321.077 ±     5663.929  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      1         colt  sample             982515.712                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      1         colt  sample            1001390.080                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      1         colt  sample            1010407.834                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      1         colt  sample            1012819.558                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      1         colt  sample            1025507.328                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     1         colt  sample            1025507.328                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    1         colt  sample            1025507.328                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      1         colt  sample            1025507.328                 us/op
JavaMatrixBenchmark.mulBenchmark                         1         ejml  sample       53    758713.982 ±    11901.265  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      1         ejml  sample             732954.624                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      1         ejml  sample             746586.112                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      1         ejml  sample             792304.026                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      1         ejml  sample             811073.536                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      1         ejml  sample             839909.376                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     1         ejml  sample             839909.376                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    1         ejml  sample             839909.376                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      1         ejml  sample             839909.376                 us/op
JavaMatrixBenchmark.mulBenchmark                         1         la4j  sample       15   2816894.566 ±   109320.511  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      1         la4j  sample            2705326.080                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      1         la4j  sample            2789212.160                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      1         la4j  sample            3011510.272                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      1         la4j  sample            3061841.920                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      1         la4j  sample            3061841.920                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     1         la4j  sample            3061841.920                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    1         la4j  sample            3061841.920                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      1         la4j  sample            3061841.920                 us/op
JavaMatrixBenchmark.mulBenchmark                         1         nd4j  sample     2927     13662.123 ±       52.072  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      1         nd4j  sample              12992.512                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      1         nd4j  sample              13549.568                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      1         nd4j  sample              13860.864                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      1         nd4j  sample              14024.704                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      1         nd4j  sample              16817.848                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     1         nd4j  sample              26095.124                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    1         nd4j  sample              30081.024                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      1         nd4j  sample              30081.024                 us/op
JavaMatrixBenchmark.mulBenchmark                         1        jBlas  sample     1239     32287.535 ±      397.264  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      1        jBlas  sample              25427.968                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      1        jBlas  sample              31293.440                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      1        jBlas  sample              35454.976                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      1        jBlas  sample              42336.256                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      1        jBlas  sample              50082.611                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     1        jBlas  sample              57936.445                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    1        jBlas  sample              57999.360                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      1        jBlas  sample              57999.360                 us/op
JavaMatrixBenchmark.mulBenchmark                         2  commonMath3  sample       27   1536998.817 ±   217659.475  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      2  commonMath3  sample             459800.576                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      2  commonMath3  sample            1610612.736                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      2  commonMath3  sample            1794742.682                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      2  commonMath3  sample            1853882.368                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      2  commonMath3  sample            1866465.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     2  commonMath3  sample            1866465.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    2  commonMath3  sample            1866465.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      2  commonMath3  sample            1866465.280                 us/op
JavaMatrixBenchmark.mulBenchmark                         2         colt  sample      156    258114.376 ±     1795.957  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      2         colt  sample             250609.664                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      2         colt  sample             257163.264                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      2         colt  sample             261698.355                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      2         colt  sample             265853.338                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      2         colt  sample             303982.182                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     2         colt  sample             321912.832                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    2         colt  sample             321912.832                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      2         colt  sample             321912.832                 us/op
JavaMatrixBenchmark.mulBenchmark                         2         ejml  sample      217    185035.007 ±      784.716  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      2         ejml  sample             179568.640                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      2         ejml  sample             184811.520                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      2         ejml  sample             189005.824                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      2         ejml  sample             191653.478                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      2         ejml  sample             195632.824                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     2         ejml  sample             204210.176                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    2         ejml  sample             204210.176                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      2         ejml  sample             204210.176                 us/op
JavaMatrixBenchmark.mulBenchmark                         2         la4j  sample       64    641646.592 ±    28571.511  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      2         la4j  sample             589299.712                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      2         la4j  sample             616562.688                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      2         la4j  sample             728760.320                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      2         la4j  sample             751828.992                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      2         la4j  sample             953155.584                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     2         la4j  sample             953155.584                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    2         la4j  sample             953155.584                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      2         la4j  sample             953155.584                 us/op
JavaMatrixBenchmark.mulBenchmark                         2         nd4j  sample     5387      7421.709 ±      439.799  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      2         nd4j  sample               6651.904                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      2         nd4j  sample               7241.728                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      2         nd4j  sample               7479.296                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      2         nd4j  sample               7569.408                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      2         nd4j  sample               8349.942                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     2         nd4j  sample              19386.466                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    2         nd4j  sample             725614.592                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      2         nd4j  sample             725614.592                 us/op
JavaMatrixBenchmark.mulBenchmark                         2        jBlas  sample     3198     12496.069 ±      109.187  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      2        jBlas  sample               9404.416                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      2        jBlas  sample              11976.704                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      2        jBlas  sample              15106.048                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      2        jBlas  sample              15351.808                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      2        jBlas  sample              18350.080                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     2        jBlas  sample              23592.960                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    2        jBlas  sample              26542.080                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      2        jBlas  sample              26542.080                 us/op
JavaMatrixBenchmark.mulBenchmark                         3  commonMath3  sample      176    228013.149 ±    10707.390  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      3  commonMath3  sample             139198.464                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      3  commonMath3  sample             229507.072                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      3  commonMath3  sample             278554.214                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      3  commonMath3  sample             292107.059                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      3  commonMath3  sample             342197.535                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     3  commonMath3  sample             343408.640                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    3  commonMath3  sample             343408.640                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      3  commonMath3  sample             343408.640                 us/op
JavaMatrixBenchmark.mulBenchmark                         3         colt  sample      668     60001.740 ±      181.600  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      3         colt  sample              58851.328                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      3         colt  sample              59768.832                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      3         colt  sample              60620.800                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      3         colt  sample              61443.277                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      3         colt  sample              66701.885                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     3         colt  sample              77856.768                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    3         colt  sample              77856.768                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      3         colt  sample              77856.768                 us/op
JavaMatrixBenchmark.mulBenchmark                         3         ejml  sample      913     43802.597 ±      700.708  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      3         ejml  sample              42598.400                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      3         ejml  sample              43384.832                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      3         ejml  sample              44171.264                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      3         ejml  sample              44630.016                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      3         ejml  sample              47495.250                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     3         ejml  sample             234356.736                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    3         ejml  sample             234356.736                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      3         ejml  sample             234356.736                 us/op
JavaMatrixBenchmark.mulBenchmark                         3         la4j  sample      259    154765.162 ±     4190.541  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      3         la4j  sample             145227.776                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      3         la4j  sample             146800.640                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      3         la4j  sample             177733.632                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      3         la4j  sample             200015.872                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      3         la4j  sample             244475.494                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     3         la4j  sample             301989.888                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    3         la4j  sample             301989.888                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      3         la4j  sample             301989.888                 us/op
JavaMatrixBenchmark.mulBenchmark                         3         nd4j  sample    20253      1973.290 ±      324.168  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      3         nd4j  sample               1656.832                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      3         nd4j  sample               1861.632                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      3         nd4j  sample               1953.792                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      3         nd4j  sample               1980.416                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      3         nd4j  sample               2050.048                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     3         nd4j  sample               4650.975                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    3         nd4j  sample              20013.541                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      3         nd4j  sample            1996488.704                 us/op
JavaMatrixBenchmark.mulBenchmark                         3        jBlas  sample    21495      1859.191 ±       13.885  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      3        jBlas  sample               1628.160                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      3        jBlas  sample               1742.848                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      3        jBlas  sample               2037.760                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      3        jBlas  sample               2158.592                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      3        jBlas  sample               3105.096                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     3        jBlas  sample               7413.957                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    3        jBlas  sample              38631.742                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      3        jBlas  sample              46596.096                 us/op
JavaMatrixBenchmark.mulBenchmark                         4  commonMath3  sample     1642     24361.551 ±      120.812  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      4  commonMath3  sample              22904.832                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      4  commonMath3  sample              23986.176                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      4  commonMath3  sample              25614.746                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      4  commonMath3  sample              27066.368                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      4  commonMath3  sample              28737.536                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     4  commonMath3  sample              44470.764                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    4  commonMath3  sample              44892.160                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      4  commonMath3  sample              44892.160                 us/op
JavaMatrixBenchmark.mulBenchmark                         4         colt  sample     2294     17429.619 ±      164.088  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      4         colt  sample              17006.592                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      4         colt  sample              17334.272                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      4         colt  sample              17530.880                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      4         colt  sample              17833.984                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      4         colt  sample              18841.600                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     4         colt  sample              32190.792                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    4         colt  sample             128450.560                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      4         colt  sample             128450.560                 us/op
JavaMatrixBenchmark.mulBenchmark                         4         ejml  sample     3207     12469.282 ±      103.969  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      4         ejml  sample              12058.624                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      4         ejml  sample              12353.536                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      4         ejml  sample              12599.296                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      4         ejml  sample              12697.600                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      4         ejml  sample              14761.984                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     4         ejml  sample              25113.657                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    4         ejml  sample             108527.616                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      4         ejml  sample             108527.616                 us/op
JavaMatrixBenchmark.mulBenchmark                         4         la4j  sample      780     51337.037 ±      783.100  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      4         la4j  sample              46137.344                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      4         la4j  sample              46858.240                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      4         la4j  sample              59113.472                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      4         la4j  sample              63671.501                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      4         la4j  sample              70541.640                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     4         la4j  sample              79036.416                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    4         la4j  sample              79036.416                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      4         la4j  sample              79036.416                 us/op
JavaMatrixBenchmark.mulBenchmark                         4         nd4j  sample    39123      1021.665 ±      158.033  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      4         nd4j  sample                800.768                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      4         nd4j  sample                963.584                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      4         nd4j  sample               1020.928                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      4         nd4j  sample               1039.360                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      4         nd4j  sample               1085.440                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     4         nd4j  sample               3885.171                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    4         nd4j  sample              16669.108                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      4         nd4j  sample            1879048.192                 us/op
JavaMatrixBenchmark.mulBenchmark                         4        jBlas  sample    52215       765.385 ±        5.042  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      4        jBlas  sample                703.488                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      4        jBlas  sample                739.328                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      4        jBlas  sample                777.216                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      4        jBlas  sample                903.373                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      4        jBlas  sample                953.344                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     4        jBlas  sample               3489.464                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    4        jBlas  sample              16149.565                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      4        jBlas  sample              47382.528                 us/op
JavaMatrixBenchmark.mulBenchmark                         5  commonMath3  sample     3285     12168.768 ±       47.340  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      5  commonMath3  sample               9289.728                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      5  commonMath3  sample              12091.392                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      5  commonMath3  sample              12632.064                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      5  commonMath3  sample              12840.141                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      5  commonMath3  sample              13893.632                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     5  commonMath3  sample              27022.393                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    5  commonMath3  sample              31064.064                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      5  commonMath3  sample              31064.064                 us/op
JavaMatrixBenchmark.mulBenchmark                         5         colt  sample     4378      9130.993 ±       69.088  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      5         colt  sample               8863.744                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      5         colt  sample               9093.120                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      5         colt  sample               9338.880                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      5         colt  sample               9371.648                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      5         colt  sample               9682.944                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     5         colt  sample              17066.426                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    5         colt  sample              96075.776                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      5         colt  sample              96075.776                 us/op
JavaMatrixBenchmark.mulBenchmark                         5         ejml  sample     6234      6411.717 ±       69.107  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      5         ejml  sample               5996.544                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      5         ejml  sample               6225.920                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      5         ejml  sample               6856.704                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      5         ejml  sample               6930.432                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      5         ejml  sample               7634.944                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     5         ejml  sample              17014.211                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    5         ejml  sample             129761.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      5         ejml  sample             129761.280                 us/op
JavaMatrixBenchmark.mulBenchmark                         5         la4j  sample     5707      7005.994 ±       56.001  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      5         la4j  sample               6709.248                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      5         la4j  sample               6979.584                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      5         la4j  sample               7053.312                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      5         la4j  sample               7094.272                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      5         la4j  sample               7290.880                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     5         la4j  sample              13932.167                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    5         la4j  sample             100663.296                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      5         la4j  sample             100663.296                 us/op
JavaMatrixBenchmark.mulBenchmark                         5         nd4j  sample    88760       450.273 ±       63.681  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      5         nd4j  sample                 97.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      5         nd4j  sample                474.112                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      5         nd4j  sample                523.776                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      5         nd4j  sample                536.576                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      5         nd4j  sample                561.152                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     5         nd4j  sample                598.016                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    5         nd4j  sample               5413.614                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      5         nd4j  sample            1717567.488                 us/op
JavaMatrixBenchmark.mulBenchmark                         5        jBlas  sample    98241       406.773 ±        2.888  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      5        jBlas  sample                358.912                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      5        jBlas  sample                391.680                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      5        jBlas  sample                430.592                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      5        jBlas  sample                473.088                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      5        jBlas  sample                494.080                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     5        jBlas  sample               1019.357                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    5        jBlas  sample              14401.687                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      5        jBlas  sample              38797.312                 us/op
JavaMatrixBenchmark.mulBenchmark                         6  commonMath3  sample    32897      1214.657 ±       14.723  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      6  commonMath3  sample               1013.760                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      6  commonMath3  sample               1208.320                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      6  commonMath3  sample               1247.232                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      6  commonMath3  sample               1261.568                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      6  commonMath3  sample               1296.384                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     6  commonMath3  sample               1838.809                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    6  commonMath3  sample              19521.949                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      6  commonMath3  sample             127795.200                 us/op
JavaMatrixBenchmark.mulBenchmark                         6         colt  sample    35039      1140.438 ±        2.663  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      6         colt  sample               1116.160                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      6         colt  sample               1128.448                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      6         colt  sample               1150.976                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      6         colt  sample               1157.120                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      6         colt  sample               1232.077                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     6         colt  sample               2308.014                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    6         colt  sample               6331.105                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      6         colt  sample              19693.568                 us/op
JavaMatrixBenchmark.mulBenchmark                         6         ejml  sample    50067       798.331 ±        1.526  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      6         ejml  sample                737.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      6         ejml  sample                785.408                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      6         ejml  sample                814.080                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      6         ejml  sample                861.184                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      6         ejml  sample                911.360                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     6         ejml  sample               1318.773                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    6         ejml  sample               4947.968                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      6         ejml  sample              12484.608                 us/op
JavaMatrixBenchmark.mulBenchmark                         6         la4j  sample    45812       872.527 ±        1.971  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      6         la4j  sample                823.296                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      6         la4j  sample                865.280                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      6         la4j  sample                884.736                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      6         la4j  sample                894.976                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      6         la4j  sample                978.944                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     6         la4j  sample               1698.175                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    6         la4j  sample               5533.996                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      6         la4j  sample              13975.552                 us/op
JavaMatrixBenchmark.mulBenchmark                         6         nd4j  sample   593296        51.140 ±        7.205  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      6         nd4j  sample                 26.752                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      6         nd4j  sample                 32.896                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      6         nd4j  sample                101.632                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      6         nd4j  sample                105.088                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      6         nd4j  sample                110.720                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     6         nd4j  sample                128.986                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    6         nd4j  sample               1630.230                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      6         nd4j  sample            1064304.640                 us/op
JavaMatrixBenchmark.mulBenchmark                         6        jBlas  sample   395193       101.020 ±        0.442  us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.00      6        jBlas  sample                 81.024                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.50      6        jBlas  sample                103.040                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.90      6        jBlas  sample                112.896                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.95      6        jBlas  sample                117.248                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.99      6        jBlas  sample                138.240                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.999     6        jBlas  sample                271.360                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p0.9999    6        jBlas  sample               3318.616                 us/op
JavaMatrixBenchmark.mulBenchmark:mulBenchmark·p1.00      6        jBlas  sample              30146.560                 us/op
